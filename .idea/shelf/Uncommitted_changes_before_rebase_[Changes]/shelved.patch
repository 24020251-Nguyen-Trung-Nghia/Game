Index: src/main/java/org/overb/arkanoidfx/enums/EventType.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/enums/EventType.java b/src/main/java/org/overb/arkanoidfx/enums/EventType.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/enums/EventType.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,8 +0,0 @@
-package org.overb.arkanoidfx.enums;
-
-public enum EventType {
-    HUD_UPDATE,
-    LEVEL_FINISHED,
-    BALL_LOST,
-    GAME_OVER
-}
Index: src/main/java/org/overb/arkanoidfx/ArkanoidApp.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/ArkanoidApp.java b/src/main/java/org/overb/arkanoidfx/ArkanoidApp.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/ArkanoidApp.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,352 +0,0 @@
-package org.overb.arkanoidfx;
-
-import com.almasb.fxgl.app.GameApplication;
-import com.almasb.fxgl.app.GameSettings;
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.physics.CollisionHandler;
-import javafx.scene.input.KeyCode;
-import javafx.scene.input.MouseButton;
-import javafx.scene.paint.Color;
-import javafx.stage.Stage;
-import lombok.Getter;
-import lombok.Setter;
-import lombok.extern.java.Log;
-import org.overb.arkanoidfx.audio.AudioMixer;
-import org.overb.arkanoidfx.audio.MusicService;
-import org.overb.arkanoidfx.audio.SfxBus;
-import org.overb.arkanoidfx.components.BallComponent;
-import org.overb.arkanoidfx.components.DebugHitboxViewComponent;
-import org.overb.arkanoidfx.components.SurpriseComponent;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.enums.EventType;
-import org.overb.arkanoidfx.enums.Resolution;
-import org.overb.arkanoidfx.game.GameSession;
-import org.overb.arkanoidfx.game.LevelManager;
-import org.overb.arkanoidfx.game.ResolutionManager;
-import org.overb.arkanoidfx.game.SurpriseService;
-import org.overb.arkanoidfx.game.core.EventBus;
-import org.overb.arkanoidfx.game.core.GameEvent;
-import org.overb.arkanoidfx.game.loaders.DefinitionsLoader;
-import org.overb.arkanoidfx.game.loaders.LevelLoader;
-import org.overb.arkanoidfx.game.ui.*;
-import org.overb.arkanoidfx.game.world.BallFactory;
-import org.overb.arkanoidfx.game.world.PaddleFactory;
-import org.overb.arkanoidfx.game.world.WallsFactory;
-
-import java.util.List;
-
-@Log
-public class ArkanoidApp extends GameApplication {
-    @Getter
-    @Setter
-    private static volatile boolean endStateMenuVisible = false;
-
-    private MainMenuUI mainMenu;
-    private OptionsMenuUI optionsMenu;
-    private InGameMenuUI pauseMenu;
-    private boolean paused = false;
-
-    @Getter
-    private EntityRepository entityRepository;
-    private List<String> levelOrder;
-    private final GameSession session = new GameSession();
-    private boolean hitboxDebugShown = false;
-    private HUDManager hudManager;
-    private BallFactory ballFactory;
-    private WallsFactory wallsFactory;
-    private PaddleFactory paddleFactory;
-    private LevelManager levelManager;
-    private SurpriseService surpriseService;
-
-
-    @Override
-    protected void initSettings(GameSettings settings) {
-        Resolution defaultResolution = Resolution.R1920x1080;
-        settings.setTitle("Arkanoid FX");
-        settings.setVersion("0.4");
-        settings.setWidth(defaultResolution.getWidth());
-        settings.setHeight(defaultResolution.getHeight());
-        settings.setFullScreenAllowed(true);
-        settings.setFullScreenFromStart(false);
-        settings.setProfilingEnabled(false);
-        settings.setMainMenuEnabled(false);
-        settings.setGameMenuEnabled(false);
-    }
-
-    @Override
-    protected void initGame() {
-        try {
-            entityRepository = new DefinitionsLoader().loadAll();
-            log.info("Loaded defs: bricks=" + entityRepository.getBricks().size() +
-                    ", surprises=" + entityRepository.getSurprises().size());
-        } catch (Exception e) {
-            log.severe("Failed to load definitions" + e.getMessage());
-            throw new RuntimeException(e);
-        }
-        session.resetForNewGame();
-        try {
-            LevelLoader levelLoader = new LevelLoader();
-            levelOrder = levelLoader.loadLevelOrder();
-            if (levelOrder.isEmpty()) {
-                throw new IllegalStateException("levels.txt contains no levels");
-            }
-            log.info("Level order: " + levelOrder);
-            hudManager = new HUDManager();
-            ballFactory = new BallFactory(entityRepository);
-            wallsFactory = new WallsFactory();
-            paddleFactory = new PaddleFactory(entityRepository);
-            levelManager = new LevelManager(entityRepository, session, hudManager, wallsFactory, paddleFactory, ballFactory, levelLoader);
-            levelManager.setLevelOrder(levelOrder);
-            levelManager.setMenuReturnHandler(() -> {
-                showMainMenu();
-                MusicService.getInstance().play("main_menu.mp3");
-            });
-            surpriseService = new SurpriseService(ballFactory, wallsFactory);
-            FXGL.getPhysicsWorld().addCollisionHandler(new CollisionHandler(EntityType.PADDLE, EntityType.SURPRISE) {
-                @Override
-                protected void onCollisionBegin(Entity paddle, Entity surprise) {
-                    applySurprise(surprise);
-                    surprise.removeFromWorld();
-                }
-            });
-        } catch (Exception e) {
-            log.severe("Failed to load levels.txt" + e.getMessage());
-            throw new RuntimeException(e);
-        }
-        EventBus.subscribe(EventType.HUD_UPDATE, e -> hudManager.refresh(session));
-        EventBus.subscribe(EventType.LEVEL_FINISHED, e -> {
-            levelManager.onLevelCleared(() -> {
-            });
-        });
-        EventBus.subscribe(EventType.GAME_OVER, e -> {
-            levelManager.onGameOver(() -> {
-            });
-        });
-        EventBus.subscribe(EventType.BALL_LOST, e -> processBallLost());
-
-        FXGL.getGameScene().setBackgroundColor(Color.BLACK);
-        showMainMenu();
-        MusicService.getInstance().play("main_menu.mp3");
-        FXGL.getGameTimer().runOnceAfter(() -> {
-            Stage stage = FXGL.getPrimaryStage();
-            ConfigOptions cfg = ConfigIO.loadOrDefault();
-            AudioMixer.getInstance().setMasterVolume(cfg.audio.master);
-            AudioMixer.getInstance().setMusicVolume(cfg.audio.music);
-            AudioMixer.getInstance().setSfxVolume(cfg.audio.sfx);
-            Resolution res = Resolution.getFromHeight(cfg.height);
-            if ("FULLSCREEN".equalsIgnoreCase(cfg.fullscreenMode)) {
-                stage.setFullScreen(true);
-            } else {
-                ResolutionManager.getInstance().applyWindowed(stage, FXGL.getGameScene().getRoot(), res);
-            }
-            ResolutionManager.getInstance().hookResizeListeners(stage, FXGL.getGameScene().getRoot());
-            FXGL.runOnce(() -> {
-                if (optionsMenu != null && optionsMenu.isVisible()) optionsMenu.requestLayout();
-                if (mainMenu != null && mainMenu.isVisible()) mainMenu.requestLayout();
-            }, javafx.util.Duration.millis(50));
-        }, javafx.util.Duration.millis(1));
-    }
-
-    private void processBallLost() {
-        if (!FXGL.getGameWorld().getEntitiesByType(EntityType.BALL).isEmpty()) {
-            return;
-        }
-        session.loseLife();
-        EventBus.publish(GameEvent.of(EventType.HUD_UPDATE));
-        if (session.getLives() > 0) {
-            levelManager.spawnPaddleAndBall();
-        } else {
-            EventBus.publish(GameEvent.of(EventType.GAME_OVER));
-        }
-    }
-
-    private void showMainMenu() {
-        MouseUI.setMouseVisible(true);
-        if (mainMenu == null) {
-            mainMenu = new MainMenuUI(item -> {
-                switch (item) {
-                    case PLAY -> startGameFromMenu();
-                    case EDITOR -> {
-                        // TODO later
-                    }
-                    case OPTIONS -> showOptionsMenu();
-                    case EXIT -> FXGL.getGameController().exit();
-                }
-            });
-        }
-        FXGL.getGameScene().clearUINodes();
-        FXGL.getGameScene().addUINodes(mainMenu);
-    }
-
-    private void showOptionsMenu() {
-        MouseUI.setMouseVisible(true);
-        ConfigOptions cfg = ConfigIO.loadOrDefault();
-        if (optionsMenu == null) {
-            optionsMenu = new OptionsMenuUI(cfg, (orig, updated) -> {
-                applyAndSaveConfig(updated);
-                showMainMenu();
-            }, v -> {
-                showMainMenu();
-            });
-        } else {
-            optionsMenu = new OptionsMenuUI(cfg, (orig, updated) -> {
-                applyAndSaveConfig(updated);
-                showMainMenu();
-            }, v -> showMainMenu());
-        }
-        FXGL.getGameScene().clearUINodes();
-        FXGL.getGameScene().addUINodes(optionsMenu);
-    }
-
-    private void applyAndSaveConfig(ConfigOptions updated) {
-        AudioMixer.getInstance().setMasterVolume(updated.audio.master);
-        AudioMixer.getInstance().setMusicVolume(updated.audio.music);
-        AudioMixer.getInstance().setSfxVolume(updated.audio.sfx);
-        Stage stage = FXGL.getPrimaryStage();
-        if ("FULLSCREEN".equalsIgnoreCase(updated.fullscreenMode)) {
-            stage.setFullScreen(true);
-        } else {
-            Resolution res = Resolution.getFromHeight(updated.height);
-            ResolutionManager.getInstance().applyWindowed(stage, FXGL.getGameScene().getRoot(), res);
-        }
-        FXGL.runOnce(() -> {
-            if (optionsMenu != null && optionsMenu.isVisible()) optionsMenu.requestLayout();
-            if (mainMenu != null && mainMenu.isVisible()) mainMenu.requestLayout();
-        }, javafx.util.Duration.millis(50));
-        ConfigIO.save(updated);
-    }
-
-    private void startGameFromMenu() {
-        MusicService.getInstance().stopCurrentMusic();
-        FXGL.getGameScene().clearUINodes();
-        MouseUI.setMouseVisible(false);
-        levelManager.startInitialLevel();
-    }
-
-    @Override
-    protected void onUpdate(double tpf) {
-        if (hudManager != null) {
-            hudManager.onFrame();
-        }
-    }
-
-    @Override
-    protected void initInput() {
-        // pause
-        FXGL.onKeyDown(KeyCode.ESCAPE, this::onPauseToggle);
-        // release ball on click
-        FXGL.onBtnDown(MouseButton.PRIMARY, () -> {
-            if (paused) {
-                return;
-            }
-            var balls = FXGL.getGameWorld().getEntitiesByType(EntityType.BALL);
-            for (var entity : balls) {
-                var bc = entity.getComponentOptional(BallComponent.class).orElse(null);
-                if (bc != null && !bc.isLaunched()) {
-                    bc.launch();
-                    break;
-                }
-            }
-        });
-        // show debug hitboxes
-        FXGL.onKeyDown(KeyCode.F9, () -> {
-            hitboxDebugShown = !hitboxDebugShown;
-            if (hitboxDebugShown) {
-                FXGL.getGameWorld().getEntities().forEach(e -> {
-                    if (e.getComponentOptional(DebugHitboxViewComponent.class).isEmpty()) {
-                        e.addComponent(new DebugHitboxViewComponent());
-                    }
-                });
-            } else {
-                FXGL.getGameWorld().getEntities().forEach(e ->
-                        e.getComponentOptional(DebugHitboxViewComponent.class).ifPresent(DebugHitboxViewComponent::onRemoved)
-                );
-            }
-        });
-        // cheats
-        FXGL.onKeyDown(KeyCode.F8, () -> surpriseService.applyMultiball());
-        FXGL.onKeyDown(KeyCode.F7, () -> surpriseService.applySafetyWall(10.0));
-}
-
-private void applySurprise(Entity surprise) {
-    var sc = surprise.getComponentOptional(SurpriseComponent.class).orElse(null);
-    String effect = sc != null ? sc.getEffect() : null;
-    String sound = sc != null ? sc.getSound() : null;
-    SfxBus.getInstance().play(sound);
-    if ("multiball".equalsIgnoreCase(effect)) {
-        var balls = FXGL.getGameWorld().getEntitiesByType(EntityType.BALL);
-        if (!balls.isEmpty()) {
-            surpriseService.applyMultiball();
-        }
-    } else if ("safety_wall".equalsIgnoreCase(effect)) {
-        surpriseService.applySafetyWall(10.0);
-    } else if ("bonus_life".equalsIgnoreCase(effect)) {
-        session.addLife();
-        EventBus.publish(GameEvent.of(EventType.HUD_UPDATE));
-    }
-}
-
-private void onPauseToggle() {
-    if (ArkanoidApp.isEndStateMenuVisible()) {
-        return;
-    }
-    if (isAnyMenuVisible()) {
-        return;
-    }
-    if (!paused) {
-        paused = true;
-        FXGL.getGameController().pauseEngine();
-        showPauseMenu();
-    } else {
-        resumeFromPause();
-    }
-}
-
-private boolean isAnyMenuVisible() {
-    if (mainMenu != null && mainMenu.getParent() != null && mainMenu.isVisible()) {
-        return true;
-    }
-    return optionsMenu != null && optionsMenu.getParent() != null && optionsMenu.isVisible();
-}
-
-private void showPauseMenu() {
-    MouseUI.setMouseVisible(true);
-    if (pauseMenu == null) {
-        pauseMenu = InGameMenuUI.builder()
-                .withTitle("Paused")
-                .withMenuItem("Resume", this::resumeFromPause)
-                .withMenuItem("Quit to main menu", this::quitToMainFromPause)
-                .withMenuItem("Exit", () -> FXGL.getGameController().exit())
-                .build();
-    }
-    FXGL.getGameScene().addUINodes(pauseMenu);
-}
-
-private void resumeFromPause() {
-    if (!paused) {
-        return;
-    }
-    paused = false;
-    FXGL.getGameController().resumeEngine();
-    if (pauseMenu != null) {
-        FXGL.getGameScene().removeUINode(pauseMenu);
-    }
-    MouseUI.setMouseVisible(false);
-}
-
-private void quitToMainFromPause() {
-    paused = false;
-    FXGL.getGameController().resumeEngine();
-    if (pauseMenu != null) {
-        FXGL.getGameScene().removeUINode(pauseMenu);
-    }
-    MouseUI.setMouseVisible(true);
-    levelManager.quitToMainMenuNoDialog();
-}
-
-public static void main(String[] args) {
-    launch(args);
-}
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/audio/MusicBus.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/audio/MusicBus.java b/src/main/java/org/overb/arkanoidfx/audio/MusicBus.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/audio/MusicBus.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,64 +0,0 @@
-package org.overb.arkanoidfx.audio;
-
-import javafx.scene.media.Media;
-import javafx.scene.media.MediaPlayer;
-
-import java.net.URL;
-import java.util.Objects;
-
-public final class MusicBus {
-
-    private static final String BASE = "assets/music/";
-    private static final MusicBus INSTANCE = new MusicBus();
-    private MediaPlayer current;
-    private String currentKey;
-
-    public static MusicBus getInstance() {
-        return INSTANCE;
-    }
-
-    public void loop(String name) {
-        if (current != null && name.equals(currentKey)) {
-            refreshVolume();
-            return;
-        }
-        stop();
-        try {
-            URL musicFile = Objects.requireNonNull(
-                    Thread.currentThread().getContextClassLoader().getResource(BASE + name),
-                    "Music not found on classpath: " + BASE + name
-            );
-            Media media = new Media(musicFile.toExternalForm());
-            current = new MediaPlayer(media);
-            current.setCycleCount(MediaPlayer.INDEFINITE);
-            current.setVolume(AudioMixer.getInstance().getEffectiveMusicVolume());
-            current.play();
-            currentKey = name;
-        } catch (Exception e) {
-            current = null;
-            currentKey = null;
-        }
-    }
-
-    public void stop() {
-        if (current == null) {
-            return;
-        }
-        try {
-            current.stop();
-        } catch (Exception ignore) {
-        }
-        try {
-            current.dispose();
-        } catch (Exception ignore) {
-        }
-        current = null;
-        currentKey = null;
-    }
-
-    public void refreshVolume() {
-        if (current != null) {
-            current.setVolume(AudioMixer.getInstance().getEffectiveMusicVolume());
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/enums/Resolution.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/enums/Resolution.java b/src/main/java/org/overb/arkanoidfx/enums/Resolution.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/enums/Resolution.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,28 +0,0 @@
-package org.overb.arkanoidfx.enums;
-
-import lombok.Getter;
-
-public enum Resolution {
-    R1280x720(1280, 720),
-    R1920x1080(1920, 1080),
-    R2560x1440(2560, 1440);
-
-    @Getter
-    private final int width;
-    @Getter
-    private final int height;
-
-    Resolution(int w, int h) {
-        this.width = w;
-        this.height = h;
-    }
-
-    public static Resolution getFromHeight(int h) {
-        for (Resolution r : values()) {
-            if (r.height == h) {
-                return r;
-            }
-        }
-        return R1280x720;
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/game/ui/OptionsMenuUI.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/OptionsMenuUI.java b/src/main/java/org/overb/arkanoidfx/game/ui/OptionsMenuUI.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/OptionsMenuUI.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,217 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import javafx.collections.FXCollections;
-import javafx.geometry.Insets;
-import javafx.geometry.Pos;
-import javafx.scene.Node;
-import javafx.scene.control.*;
-import javafx.scene.effect.DropShadow;
-import javafx.scene.image.Image;
-import javafx.scene.layout.*;
-import javafx.scene.paint.Color;
-import javafx.scene.text.Font;
-import javafx.scene.text.FontWeight;
-import javafx.scene.text.Text;
-import org.overb.arkanoidfx.ConfigOptions;
-import org.overb.arkanoidfx.audio.AudioMixer;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-import java.util.Arrays;
-import java.util.List;
-import java.util.Objects;
-import java.util.function.BiConsumer;
-import java.util.function.Consumer;
-
-public class OptionsMenuUI extends StackPane {
-
-    private final GridPane grid = new GridPane();
-    private final ComboBox<String> resolutionBox = new ComboBox<>();
-    private final ToggleGroup windowModeGroup = new ToggleGroup();
-    private final RadioButton rbWindowed = new RadioButton("Windowed");
-    private final RadioButton rbFullscreen = new RadioButton("Fullscreen");
-    private final Slider masterSlider = mkSlider();
-    private final Slider musicSlider = mkSlider();
-    private final Slider sfxSlider = mkSlider();
-    private ConfigOptions original;
-
-    public OptionsMenuUI(ConfigOptions cfg, BiConsumer<ConfigOptions, ConfigOptions> onApply, Consumer<Void> onCancel) {
-        applyBackground("/assets/textures/bg/black-red-square-rectangle-rq-2560x1440.jpg");
-        setPrefSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMaxSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMinSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        this.original = copyOf(cfg);
-
-        grid.setAlignment(Pos.CENTER);
-        grid.setHgap(16);
-        grid.setVgap(12);
-        grid.setPadding(new Insets(32, 5, 5, 5));
-
-        int row = 0;
-        Text title = new Text("Options");
-        title.setFill(Color.WHITE);
-        title.setFont(Font.font("Verdana", FontWeight.BOLD, 50));
-        title.setEffect(new DropShadow(24, Color.LIGHTGRAY));
-        grid.add(title, 0, row++, 2, 1);
-
-        // Resolution
-        grid.add(label("Resolution"), 0, row);
-        List<String> resItems = Arrays.asList("1280x720", "1920x1080", "2560x1440");
-        resolutionBox.setItems(FXCollections.observableArrayList(resItems));
-        String currentRes = cfg.width + "x" + cfg.height;
-        if (!resItems.contains(currentRes)) currentRes = "1920x1080";
-        resolutionBox.getSelectionModel().select(currentRes);
-        grid.add(resolutionBox, 1, row++);
-
-        // Window mode
-        grid.add(label("Window mode"), 0, row);
-        rbWindowed.setToggleGroup(windowModeGroup);
-        rbFullscreen.setToggleGroup(windowModeGroup);
-        rbWindowed.setTextFill(Color.WHITE);
-        rbFullscreen.setTextFill(Color.WHITE);
-        rbWindowed.setSelected(!"FULLSCREEN".equalsIgnoreCase(cfg.fullscreenMode));
-        rbFullscreen.setSelected("FULLSCREEN".equalsIgnoreCase(cfg.fullscreenMode));
-        grid.add(mkHBox(12.0, rbWindowed, rbFullscreen), 1, row++);
-
-        // Master
-        grid.add(label("Master volume"), 0, row);
-        masterSlider.setValue(clamp01(cfg.audio.master) * 100);
-        masterSlider.setPadding(new Insets(16, 0, 0, 0));
-        grid.add(masterSlider, 1, row++);
-
-        // Music
-        grid.add(label("Music volume"), 0, row);
-        musicSlider.setValue(clamp01(cfg.audio.music) * 100);
-        musicSlider.setPadding(new Insets(16, 0, 0, 0));
-        grid.add(musicSlider, 1, row++);
-
-        // SFX
-        grid.add(label("SFX volume"), 0, row);
-        sfxSlider.setValue(clamp01(cfg.audio.sfx) * 100);
-        sfxSlider.setPadding(new Insets(16, 0, 0, 0));
-        grid.add(sfxSlider, 1, row++);
-
-        // Buttons
-        Button btnApply = new Button("Apply");
-        Button btnCancel = new Button("Cancel");
-        btnApply.setOnAction(e -> {
-            ConfigOptions updated = computeUpdated(cfg);
-            onApply.accept(original, updated);
-            original = copyOf(updated);
-        });
-        btnCancel.setOnAction(e -> {
-            applyVolumes(original);
-            resolutionBox.getSelectionModel().select(original.width + "x" + original.height);
-            rbWindowed.setSelected(!"FULLSCREEN".equalsIgnoreCase(original.fullscreenMode));
-            rbFullscreen.setSelected("FULLSCREEN".equalsIgnoreCase(original.fullscreenMode));
-            onCancel.accept(null);
-        });
-        grid.add(mkHBox(16.0, btnApply, btnCancel), 0, row, 2, 1);
-
-        getChildren().add(grid);
-        StackPane.setAlignment(grid, Pos.CENTER);
-
-        masterSlider.valueProperty().addListener((o, ov, nv) -> applyVolumes(computePreview()));
-        musicSlider.valueProperty().addListener((o, ov, nv) -> applyVolumes(computePreview()));
-        sfxSlider.valueProperty().addListener((o, ov, nv) -> applyVolumes(computePreview()));
-    }
-
-    @Override
-    protected void layoutChildren() {
-        super.layoutChildren();
-        double w = ResolutionManager.DESIGN_RESOLUTION.getWidth();
-        double h = ResolutionManager.DESIGN_RESOLUTION.getHeight();
-        grid.applyCss();
-        double mw = Math.max(grid.prefWidth(-1), grid.getWidth());
-        double mh = Math.max(grid.prefHeight(-1), grid.getHeight());
-        double x = (w - mw) / 2.0;
-        double y = (h - mh) / 2.0;
-        if (Double.isNaN(x)) x = 0;
-        if (Double.isNaN(y)) y = 0;
-        layoutInArea(grid, x, y, mw, mh, -1, Pos.CENTER.getHpos(), Pos.CENTER.getVpos());
-    }
-
-    private Label label(String text) {
-        Label l = new Label(text);
-        l.setTextFill(Color.WHITE);
-        l.setFont(Font.font("Cambria", 22));
-        return l;
-    }
-
-    private javafx.scene.layout.HBox mkHBox(double spacing, Node... nodes) {
-        javafx.scene.layout.HBox hb = new javafx.scene.layout.HBox(spacing, nodes);
-        hb.setAlignment(Pos.CENTER_LEFT);
-        return hb;
-    }
-
-    private static Slider mkSlider() {
-        Slider s = new Slider(0, 100, 100);
-        s.setShowTickLabels(true);
-        s.setShowTickMarks(true);
-        s.setMajorTickUnit(25);
-        s.setMinorTickCount(4);
-        s.setBlockIncrement(1);
-        s.setPrefWidth(280);
-        return s;
-    }
-
-    private static double clamp01(double v) {
-        if (v < 0) return 0;
-        if (v > 1) return 1;
-        return v;
-    }
-
-    private ConfigOptions computeUpdated(ConfigOptions base) {
-        ConfigOptions updated = copyOf(base);
-        String sel = resolutionBox.getSelectionModel().getSelectedItem();
-        if (sel != null) {
-            String[] parts = sel.split("x");
-            updated.width = Integer.parseInt(parts[0]);
-            updated.height = Integer.parseInt(parts[1]);
-        }
-        updated.fullscreenMode = rbFullscreen.isSelected() ? "FULLSCREEN" : "WINDOWED";
-        ConfigOptions.AudioCfg a = new ConfigOptions.AudioCfg();
-        a.master = clamp01(masterSlider.getValue() / 100.0);
-        a.music = clamp01(musicSlider.getValue() / 100.0);
-        a.sfx = clamp01(sfxSlider.getValue() / 100.0);
-        updated.audio = a;
-        return updated;
-    }
-
-    private ConfigOptions computePreview() {
-        ConfigOptions tmp = copyOf(original);
-        tmp.audio.master = clamp01(masterSlider.getValue() / 100.0);
-        tmp.audio.music = clamp01(musicSlider.getValue() / 100.0);
-        tmp.audio.sfx = clamp01(sfxSlider.getValue() / 100.0);
-        return tmp;
-    }
-
-    private static ConfigOptions copyOf(ConfigOptions c) {
-        ConfigOptions d = new ConfigOptions();
-        d.width = c.width;
-        d.height = c.height;
-        d.fullscreenMode = c.fullscreenMode;
-        d.nativeW = c.nativeW;
-        d.nativeH = c.nativeH;
-        d.audio.master = c.audio.master;
-        d.audio.music = c.audio.music;
-        d.audio.sfx = c.audio.sfx;
-        return d;
-    }
-
-    public void applyVolumes(ConfigOptions cfg) {
-        AudioMixer.getInstance().setMasterVolume(cfg.audio.master);
-        AudioMixer.getInstance().setMusicVolume(cfg.audio.music);
-        AudioMixer.getInstance().setSfxVolume(cfg.audio.sfx);
-    }
-
-    private void applyBackground(String resource) {
-        try {
-            Image img = new Image(Objects.requireNonNull(getClass().getResourceAsStream(resource)));
-            BackgroundSize size = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, true);
-            BackgroundImage bg = new BackgroundImage(img, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, size);
-            setBackground(new Background(bg));
-        } catch (Exception e) {
-            setStyle("-fx-background-color: black;");
-        }
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/ConfigIO.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/ConfigIO.java b/src/main/java/org/overb/arkanoidfx/ConfigIO.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/ConfigIO.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,48 +0,0 @@
-package org.overb.arkanoidfx;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-public class ConfigIO {
-
-    public static ConfigOptions loadOrDefault() {
-        try {
-            Path file = getConfigPath();
-            Files.createDirectories(file.getParent());
-            if (Files.exists(file)) {
-                ObjectMapper mapper = new ObjectMapper();
-                return mapper.readValue(file.toFile(), ConfigOptions.class);
-            }
-        } catch (Exception ignored) {
-        }
-        return new ConfigOptions();
-    }
-
-    public static void save(ConfigOptions cfg) {
-        try {
-            Path file = getConfigPath();
-            Files.createDirectories(file.getParent());
-            ObjectMapper mapper = new ObjectMapper();
-            try (var w = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {
-                mapper.writerWithDefaultPrettyPrinter().writeValue(w, cfg);
-            }
-        } catch (Exception ignored) {
-        }
-    }
-
-    private static Path getConfigPath() throws IOException {
-        Path configDir = Paths.get(
-                System.getProperty("os.name").toLowerCase().contains("win")
-                        ? System.getenv("APPDATA")
-                        : System.getProperty("user.home"),
-                "org.overb.ArkanoidFX"
-        );
-        Files.createDirectories(configDir);
-        return configDir.resolve("settings.json");
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/audio/SfxBus.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/audio/SfxBus.java b/src/main/java/org/overb/arkanoidfx/audio/SfxBus.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/audio/SfxBus.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,55 +0,0 @@
-package org.overb.arkanoidfx.audio;
-
-import javafx.scene.media.AudioClip;
-
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-
-public final class SfxBus {
-
-    private static final String BASE = "assets/sounds/";
-    private static final int CHANNELS = 3;
-    private static final SfxBus INSTANCE = new SfxBus();
-    private final Map<String, AudioClip[]> pool = new HashMap<>();
-    private final Map<String, Integer> rrIndex = new HashMap<>();
-
-    public static SfxBus getInstance() {
-        return INSTANCE;
-    }
-
-    public void play(String name) {
-        if (name == null || name.isBlank()) return;
-        AudioClip[] clips = pool.computeIfAbsent(name, this::loadClips);
-        if (clips == null) return;
-        int channelIndex = nextIndex(name);
-        AudioClip clip = clips[channelIndex];
-        if (clip != null) {
-            clip.setVolume(AudioMixer.getInstance().getEffectiveSfxVolume());
-            clip.play();
-        }
-    }
-
-    private int nextIndex(String key) {
-        int next = (rrIndex.getOrDefault(key, -1) + 1) % CHANNELS;
-        rrIndex.put(key, next);
-        return next;
-    }
-
-    private AudioClip[] loadClips(String key) {
-        try {
-            URL sfxFile = Objects.requireNonNull(
-                    Thread.currentThread().getContextClassLoader().getResource(BASE + key),
-                    "Sound not found on classpath: " + BASE + key
-            );
-            AudioClip[] sfxChannels = new AudioClip[CHANNELS];
-            for (int i = 0; i < CHANNELS; i++) {
-                sfxChannels[i] = new AudioClip(sfxFile.toExternalForm());
-            }
-            return sfxChannels;
-        } catch (Exception e) {
-            return null;
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/ResolutionManager.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ResolutionManager.java b/src/main/java/org/overb/arkanoidfx/game/ResolutionManager.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ResolutionManager.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,68 +0,0 @@
-package org.overb.arkanoidfx.game;
-
-import com.almasb.fxgl.dsl.FXGL;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
-import org.overb.arkanoidfx.enums.Resolution;
-
-public final class ResolutionManager {
-
-    public static final ResolutionManager INSTANCE = new ResolutionManager();
-    public static final Resolution DESIGN_RESOLUTION = Resolution.R1920x1080;
-
-    public static ResolutionManager getInstance() {
-        return INSTANCE;
-    }
-
-    public void applyWindowed(Stage stage, Parent gameRoot, Resolution resolution) {
-        int targetW = resolution.getWidth();
-        int targetH = resolution.getHeight();
-        stage.setFullScreen(false);
-        stage.setMaximized(false);
-        ensureClientAreaSize(stage, targetW, targetH);
-        applyScale(gameRoot);
-    }
-
-    private void ensureClientAreaSize(Stage stage, int clientW, int clientH) {
-        Scene scene = FXGL.getGameScene().getRoot().getScene();
-        if (scene == null) {
-            stage.setWidth(clientW);
-            stage.setHeight(clientH);
-            return;
-        }
-        if (scene.getWidth() <= 0 || scene.getHeight() <= 0) {
-            stage.sizeToScene();
-        }
-
-        double decoW = stage.getWidth() - scene.getWidth();
-        double decoH = stage.getHeight() - scene.getHeight();
-
-        if (Double.isNaN(decoW) || decoW < 0) {
-            decoW = 16;
-        }
-        if (Double.isNaN(decoH) || decoH < 0){
-            decoH = 39;
-        }
-        stage.setWidth(clientW + decoW);
-        stage.setHeight(clientH + decoH);
-    }
-
-    public void applyScale(Parent gameRoot) {
-        gameRoot.setScaleX(1.0);
-        gameRoot.setScaleY(1.0);
-        gameRoot.setTranslateX(0.0);
-        gameRoot.setTranslateY(0.0);
-    }
-
-    public void hookResizeListeners(Stage stage, Parent gameRoot) {
-        Scene scene = FXGL.getGameScene().getRoot().getScene();
-        if (scene != null) {
-            scene.widthProperty().addListener((obs, ov, nv) -> applyScale(gameRoot));
-            scene.heightProperty().addListener((obs, ov, nv) -> applyScale(gameRoot));
-        } else {
-            stage.widthProperty().addListener((obs, ov, nv) -> applyScale(gameRoot));
-            stage.heightProperty().addListener((obs, ov, nv) -> applyScale(gameRoot));
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/LevelBuilder.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/LevelBuilder.java b/src/main/java/org/overb/arkanoidfx/game/LevelBuilder.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/LevelBuilder.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,81 +0,0 @@
-package org.overb.arkanoidfx.game;
-
-import com.almasb.fxgl.dsl.EntityBuilder;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.physics.BoundingShape;
-import com.almasb.fxgl.physics.HitBox;
-import com.almasb.fxgl.texture.Texture;
-import javafx.geometry.Point2D;
-import javafx.scene.Group;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Rectangle;
-import org.overb.arkanoidfx.components.BrickComponent;
-import org.overb.arkanoidfx.entities.BrickEntity;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.entities.LevelEntity;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.world.SurpriseFactory;
-import org.overb.arkanoidfx.util.TextureUtils;
-
-public class LevelBuilder {
-
-    private final EntityRepository entityDefinitions;
-    private final GameSession session;
-    private final SurpriseFactory surpriseFactory;
-    private double brickW;
-    private double brickH;
-
-    public LevelBuilder(EntityRepository entityDefinitions, GameSession session) {
-        this.entityDefinitions = entityDefinitions;
-        this.session = session;
-        this.surpriseFactory = new SurpriseFactory();
-    }
-
-    public void buildBricks(LevelEntity level) {
-        brickW = EntityType.BRICK.getDesignWidth();
-        brickH = EntityType.BRICK.getDesignHeight();
-        for (LevelEntity.Cell cell : level.cells) {
-            BrickEntity def = entityDefinitions.getBrick(cell.brickId);
-            if (def == null) {
-                continue;
-            }
-            double x = cell.col * brickW;
-            double y = cell.row * brickH;
-            var viewPair = buildBrickView(def);
-            Group viewRoot = viewPair.root;
-            Texture texture = viewPair.texture;
-            new EntityBuilder()
-                    .type(EntityType.BRICK)
-                    .at(x, y)
-                    .view(viewRoot)
-                    .bbox(new HitBox(new Point2D(0, 0), BoundingShape.box(brickW, brickH)))
-                    .with(new CollidableComponent(true))
-                    .with(new BrickComponent(def, session, texture, entityDefinitions, surpriseFactory))
-                    .buildAndAttach()
-                    .getTransformComponent().setScaleOrigin(new Point2D(0, 0));
-            if (def.hp != -1) {
-                session.registerDestructibleBrick();
-            }
-        }
-    }
-
-    private record ViewPair(Group root, Texture texture) {
-    }
-
-    private ViewPair buildBrickView(BrickEntity def) {
-        Group root = new Group();
-        root.setAutoSizeChildren(false);
-        Texture tex = TextureUtils.loadTextureOrNull(def.visual.sprite, brickW, brickH, Math.max(1, def.visual.frameW), Math.max(1, def.visual.frameH));
-        if (tex != null) {
-            root.getChildren().add(tex);
-            return new ViewPair(root, tex);
-        } else {
-            Rectangle fallback = new Rectangle(brickW, brickH, Color.HOTPINK);
-            fallback.setStroke(Color.BLACK);
-            fallback.setTranslateX(0);
-            fallback.setTranslateY(0);
-            root.getChildren().add(fallback);
-            return new ViewPair(root, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/BrickComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/BrickComponent.java b/src/main/java/org/overb/arkanoidfx/components/BrickComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/BrickComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,198 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.component.Component;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.texture.Texture;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.application.Platform;
-import javafx.geometry.Point2D;
-import javafx.util.Duration;
-import lombok.Getter;
-import org.overb.arkanoidfx.audio.SfxBus;
-import org.overb.arkanoidfx.entities.BrickEntity;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.entities.SurpriseEntity;
-import org.overb.arkanoidfx.enums.EventType;
-import org.overb.arkanoidfx.game.GameSession;
-import org.overb.arkanoidfx.game.core.EventBus;
-import org.overb.arkanoidfx.game.core.GameEvent;
-import org.overb.arkanoidfx.game.world.SurpriseFactory;
-import org.overb.arkanoidfx.util.BallQueries;
-import org.overb.arkanoidfx.util.TextureUtils;
-
-import java.util.concurrent.ThreadLocalRandom;
-
-public class BrickComponent extends Component {
-
-    private final BrickEntity brickEntity;
-    private final GameSession session;
-    private final Texture texture;
-    private final EntityRepository repository;
-    private final SurpriseFactory surpriseFactory;
-    private int hp;
-    private int currentFrame = 0;
-    @Getter
-    private boolean destroyed = false;
-
-    public BrickComponent(BrickEntity brickEntity, GameSession session, Texture texture,
-                          EntityRepository repository, SurpriseFactory surpriseFactory) {
-        this.brickEntity = brickEntity;
-        this.session = session;
-        this.hp = brickEntity.hp;
-        this.texture = texture;
-        this.repository = repository;
-        this.surpriseFactory = surpriseFactory;
-    }
-
-    @Override
-    public void onAdded() {
-        if (texture != null) {
-            TextureUtils.setViewportFrame(texture, 0, brickEntity.visual.frameW, brickEntity.visual.frameH);
-        }
-    }
-
-    public void onBallHit(Entity ballEntity) {
-        if (destroyed) {
-            return;
-        }
-        SfxBus.getInstance().play(brickEntity.hitSound);
-        if (brickEntity.speedEffect > 0) {
-            ballEntity.getComponentOptional(BallComponent.class)
-                    .ifPresent(bc -> bc.boostSpeedByFactor(1.0 + brickEntity.speedEffect));
-        }
-        ballEntity.getComponentOptional(BallComponent.class).ifPresent(bc -> {
-            if (ThreadLocalRandom.current().nextDouble() < 0.20) {
-                double sign = ThreadLocalRandom.current().nextBoolean() ? 1.0 : -1.0;
-                double angRad = Math.toRadians(0.5) * sign;
-                var v = bc.getVelocity();
-                if (v != null && v.magnitude() > 1e-6) {
-                    double cos = Math.cos(angRad);
-                    double sin = Math.sin(angRad);
-                    double nx = v.getX() * cos - v.getY() * sin;
-                    double ny = v.getX() * sin + v.getY() * cos;
-                    bc.setVelocity(new Point2D(nx, ny));
-                }
-            }
-        });
-        if (brickEntity.damageAdvancesFrame && brickEntity.visual.frames > 1) {
-            advanceFrame();
-        }
-        if (hp == -1) {
-            return;
-        }
-        hp = Math.max(0, hp - 1);
-        if (hp != 0) {
-            return;
-        }
-        destroyed = true;
-        entity.getComponentOptional(CollidableComponent.class).ifPresent(cc -> cc.setValue(false));
-        double maxSpeed = BallQueries.findMaxBallSpeed();
-        double baseSpeed = BallComponent.getBaseSpeed();
-        session.onBrickDestroyed(brickEntity.points, maxSpeed, baseSpeed);
-        EventBus.publish(GameEvent.of(EventType.HUD_UPDATE));
-        SfxBus.getInstance().play(brickEntity.destroySound);
-        spawnSurpriseIfAny(entity.getX(), entity.getY());
-        if (brickEntity.breakAnim != null) {
-            final Entity e = entity;
-            if (e == null) {
-                return;
-            }
-            FXGL.getGameTimer().runOnceAfter(() -> {
-                if (!e.isActive()) {
-                    return;
-                }
-                playBreakAnimationOrRemove(e);
-            }, Duration.millis(1));
-        } else {
-            if (entity != null && entity.isActive()) {
-                entity.removeFromWorld();
-            }
-        }
-        if (session.getDestructibleBricksLeft() == 0) {
-            Platform.runLater(() -> EventBus.publish(GameEvent.of(EventType.LEVEL_FINISHED)));
-        }
-    }
-
-    private void spawnSurpriseIfAny(double x, double y) {
-        if (!session.areSurprisesEnabled()) {
-            return;
-        }
-        var surprises = repository.getSurprises().values();
-        if (surprises.isEmpty()) {
-            return;
-        }
-        SurpriseEntity chosen = null;
-        double bestRoll = 0;
-        for (var s : surprises) {
-            double chance = s.spawnChance > 0 ? s.spawnChance : 0.10;
-            double roll = ThreadLocalRandom.current().nextDouble();
-            if (roll < chance && (chosen == null || roll < bestRoll)) {
-                chosen = s;
-                bestRoll = roll;
-            }
-        }
-        if (chosen == null) {
-            return;
-        }
-        surpriseFactory.buildAt(x, y, chosen).ifPresent(e -> FXGL.getGameWorld().addEntity(e));
-        SfxBus.getInstance().play("surprise.wav");
-    }
-
-    private void advanceFrame() {
-        if (texture == null) return;
-        int total = Math.max(1, brickEntity.visual.frames);
-        currentFrame = (currentFrame + 1) % total;
-        TextureUtils.setViewportFrame(texture, currentFrame, brickEntity.visual.frameW, brickEntity.visual.frameH);
-    }
-
-    private void playBreakAnimationOrRemove(Entity e) {
-        var anim = brickEntity.breakAnim;
-        if (anim == null) {
-            if (e.isActive()) e.removeFromWorld();
-            return;
-        }
-        Texture breakTex;
-        try {
-            breakTex = FXGL.texture(anim.sprite);
-        } catch (Exception ex) {
-            if (e.isActive()) e.removeFromWorld();
-            return;
-        }
-        double targetW = e.getWidth();
-        double targetH = e.getHeight();
-        int fw = Math.max(1, anim.frameW);
-        int fh = Math.max(1, anim.frameH);
-
-        breakTex.setFitWidth(targetW);
-        breakTex.setFitHeight(targetH);
-        breakTex.setPreserveRatio(false);
-        breakTex.setSmooth(false);
-        breakTex.setTranslateX(0);
-        breakTex.setTranslateY(0);
-        TextureUtils.setViewportFrame(breakTex, 0, fw, fh);
-        if (!e.isActive()) {
-            return;
-        }
-        e.getViewComponent().clearChildren();
-        e.getViewComponent().addChild(breakTex);
-        int total = Math.max(1, anim.frames);
-        double frameDurSec = anim.frameDuration > 0 ? anim.frameDuration : 0.05;
-        final int[] frameIndex = {0};
-        final TimerAction[] actionHolder = new TimerAction[1];
-        actionHolder[0] = FXGL.getGameTimer().runAtInterval(() -> {
-            if (!e.isActive()) {
-                if (actionHolder[0] != null) actionHolder[0].expire();
-                return;
-            }
-            frameIndex[0]++;
-            if (frameIndex[0] >= total) {
-                if (actionHolder[0] != null) actionHolder[0].expire();
-                if (e.isActive()) e.removeFromWorld();
-            } else {
-                TextureUtils.setViewportFrame(breakTex, frameIndex[0], fw, fh);
-            }
-        }, Duration.seconds(frameDurSec));
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/loaders/DefinitionsLoader.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/loaders/DefinitionsLoader.java b/src/main/java/org/overb/arkanoidfx/game/loaders/DefinitionsLoader.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/loaders/DefinitionsLoader.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,138 +0,0 @@
-package org.overb.arkanoidfx.game.loaders;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import org.overb.arkanoidfx.entities.*;
-
-import java.util.List;
-
-public class DefinitionsLoader {
-
-    private final ObjectMapper mapper = new ObjectMapper();
-
-    public EntityRepository loadAll() throws Exception {
-        var repo = new EntityRepository();
-        loadBricks(repo);
-        loadSurprises(repo);
-        loadBalls(repo);
-        loadPaddles(repo);
-        validate(repo);
-        return repo;
-    }
-
-    private void loadBricks(EntityRepository repo) throws Exception {
-        String json = tryLoadTextViaFXGL("bricks.json");
-        JsonNode root = mapper.readTree(json);
-        JsonNode bricks = root.path("bricks");
-        if (!bricks.isArray()) {
-            throw new IllegalStateException("defs/bricks.json: 'bricks' must be an array");
-        }
-        for (JsonNode node : bricks) {
-            BrickEntity def = mapper.treeToValue(node, BrickEntity.class);
-            repo.addBrick(def);
-        }
-    }
-
-    private void loadSurprises(EntityRepository repo) throws Exception {
-        String json = tryLoadTextViaFXGL("surprises.json");
-        JsonNode root = mapper.readTree(json);
-        JsonNode surprises = root.path("surprises");
-        if (!surprises.isArray()) {
-            throw new IllegalStateException("defs/surprises.json: 'surprises' must be an array");
-        }
-        for (JsonNode node : surprises) {
-            SurpriseEntity def = mapper.treeToValue(node, SurpriseEntity.class);
-            repo.addSurprise(def);
-        }
-    }
-
-    private void loadBalls(EntityRepository repo) throws Exception {
-        String json = tryLoadTextViaFXGL("balls.json");
-        var root = mapper.readTree(json);
-        var balls = root.path("balls");
-        if (!balls.isArray()) {
-            throw new IllegalStateException("defs/balls.json: 'balls' must be an array");
-        }
-        for (var node : balls) {
-            BallEntity def = mapper.treeToValue(node, BallEntity.class);
-            repo.addBall(def);
-        }
-    }
-
-    private void loadPaddles(EntityRepository repo) throws Exception {
-        String json = tryLoadTextViaFXGL("paddles.json");
-        JsonNode root = mapper.readTree(json);
-        JsonNode paddles = root.path("paddles");
-        if (!paddles.isArray()) throw new IllegalStateException("defs/paddles.json: 'paddles' must be an array");
-        for (JsonNode node : paddles) {
-            PaddleEntity def = mapper.treeToValue(node, PaddleEntity.class);
-            repo.addPaddle(def);
-        }
-    }
-
-    private String tryLoadTextViaFXGL(String pathInAssets) {
-        try {
-            List<String> lines = FXGL.getAssetLoader().loadText(pathInAssets);
-            if (lines.isEmpty()) {
-                throw new IllegalStateException("Empty or missing text asset: " + pathInAssets + " (expected under assets/text)");
-            }
-            return String.join("\n", lines);
-        } catch (Exception e) {
-            throw new IllegalStateException("Failed to load text asset: " + pathInAssets + " (expected under assets/text)", e);
-        }
-    }
-
-    private void validate(EntityRepository repo) {
-        repo.getBricks().forEach((id, definition) -> {
-            if (id <= 0) {
-                throw new IllegalStateException("Brick id must be positive: " + id);
-            }
-            if (definition.visual.frames <= 0) {
-                throw new IllegalStateException("Brick frames must be > 0 for id=" + id);
-            }
-            if (definition.visual.frameW <= 0 || definition.visual.frameH <= 0) {
-                throw new IllegalStateException("Brick frame size invalid for id=" + id);
-            }
-        });
-        repo.getSurprises().forEach((id, definition) -> {
-            if (id <= 0) {
-                throw new IllegalStateException("Surprise id must be positive: " + id);
-            }
-            if (definition.visual.frames <= 0) {
-                throw new IllegalStateException("Surprise frames must be > 0 for id=" + id);
-            }
-            if (definition.visual.frameW <= 0 || definition.visual.frameH <= 0) {
-                throw new IllegalStateException("Surprise frame size invalid for id=" + id);
-            }
-            if (definition.spawnChance < 0.0 || definition.spawnChance > 1.0) {
-                throw new IllegalStateException("Surprise spawnChance must be in [0,1] for id=" + id);
-            }
-        });
-        repo.getBalls().forEach((id, def) -> {
-            if (id <= 0) {
-                throw new IllegalStateException("Ball id must be positive: " + id);
-            }
-            if (def.sizeW <= 0 || def.sizeH <= 0) {
-                throw new IllegalStateException("Ball size invalid for id=" + id);
-            }
-            if (def.visual != null) {
-                if (def.visual.frameW <= 0 || def.visual.frameH <= 0) {
-                    throw new IllegalStateException("Ball frame size invalid for id=" + id);
-                }
-            }
-        });
-        repo.getPaddles().forEach((id, definition) -> {
-            if (id <= 0) {
-                throw new IllegalStateException("Paddle id must be positive: " + id);
-            }
-            if (definition.sizeW <= 0 || definition.sizeH <= 0) {
-                throw new IllegalStateException("Paddle size invalid for id=" + id);
-            }
-            if (definition.visual != null) {
-                if (definition.visual.frameW <= 0 || definition.visual.frameH <= 0)
-                    throw new IllegalStateException("Paddle frame size invalid for id=" + id);
-            }
-        });
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/SurpriseComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/SurpriseComponent.java b/src/main/java/org/overb/arkanoidfx/components/SurpriseComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/SurpriseComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,31 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.entity.component.Component;
-import javafx.geometry.Point2D;
-import org.overb.arkanoidfx.entities.SurpriseEntity;
-
-public class SurpriseComponent extends Component {
-
-    private final SurpriseEntity surpriseDefinition;
-
-    public SurpriseComponent(SurpriseEntity surpriseDefinition) {
-        this.surpriseDefinition = surpriseDefinition;
-    }
-
-    @Override
-    public void onUpdate(double tpf) {
-        double fallSpeed = surpriseDefinition.fallSpeed > 0 ? surpriseDefinition.fallSpeed : 220.0;
-        entity.translate(new Point2D(0, fallSpeed * tpf));
-        if (entity.getY() > 2000) {
-            entity.removeFromWorld();
-        }
-    }
-
-    public String getEffect() {
-        return surpriseDefinition.effect;
-    }
-
-    public String getSound() {
-        return surpriseDefinition.sound;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/world/SurpriseFactory.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/world/SurpriseFactory.java b/src/main/java/org/overb/arkanoidfx/game/world/SurpriseFactory.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/world/SurpriseFactory.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,42 +0,0 @@
-package org.overb.arkanoidfx.game.world;
-
-import com.almasb.fxgl.dsl.EntityBuilder;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.physics.BoundingShape;
-import com.almasb.fxgl.physics.HitBox;
-import com.almasb.fxgl.texture.Texture;
-import javafx.scene.Group;
-import org.overb.arkanoidfx.components.BallAnimComponent;
-import org.overb.arkanoidfx.components.SurpriseComponent;
-import org.overb.arkanoidfx.entities.SurpriseEntity;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.util.TextureUtils;
-
-import java.util.Optional;
-
-public final class SurpriseFactory {
-
-    public Optional<Entity> buildAt(double x, double y, SurpriseEntity def) {
-        Group viewRoot = new Group();
-        viewRoot.setAutoSizeChildren(false);
-        int frameW = Math.max(1, def.visual.frameW);
-        int frameH = Math.max(1, def.visual.frameH);
-        Texture tex = TextureUtils.loadTextureOrNull(def.visual.sprite, frameW, frameH, frameW, frameH);
-        viewRoot.getChildren().add(tex);
-        Entity entity = new EntityBuilder()
-                .type(EntityType.SURPRISE)
-                .at(x, y)
-                .view(viewRoot)
-                .bbox(new HitBox(BoundingShape.box(frameW, frameH)))
-                .with(new CollidableComponent(true))
-                .with(new SurpriseComponent(def))
-                .build();
-        int frames = Math.max(1, def.visual.frames);
-        double frameDuration = def.visual.frameDuration > 0 ? def.visual.frameDuration : 0.0;
-        if (frames > 1 && frameDuration > 0.0) {
-            entity.addComponent(new BallAnimComponent(tex, frames, frameW, frameH, frameDuration));
-        }
-        return Optional.of(entity);
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/levels/level_04.json
===================================================================
diff --git a/src/main/resources/assets/levels/level_04.json b/src/main/resources/assets/levels/level_04.json
deleted file mode 100644
--- a/src/main/resources/assets/levels/level_04.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,22 +0,0 @@
-{
-  "cols": 24,
-  "rows": 18,
-  "music": "level_04.mp3",
-  "background": "group-of-red-black-cubes-c8-2560x1440.jpg",
-  "cells": [
-    { "col": 2, "row": 1, "brickId": 4 }, { "col": 3, "row": 1, "brickId": 1 }, { "col": 4, "row": 1, "brickId": 4 }, { "col": 5, "row": 1, "brickId": 1 }, { "col": 6, "row": 1, "brickId": 4 }, { "col": 7, "row": 1, "brickId": 1 }, { "col": 8, "row": 1, "brickId": 4 }, { "col": 9, "row": 1, "brickId": 1 }, { "col": 10, "row": 1, "brickId": 4 }, { "col": 11, "row": 1, "brickId": 1 }, { "col": 12, "row": 1, "brickId": 4 }, { "col": 13, "row": 1, "brickId": 1 }, { "col": 14, "row": 1, "brickId": 4 }, { "col": 15, "row": 1, "brickId": 1 }, { "col": 16, "row": 1, "brickId": 4 }, { "col": 17, "row": 1, "brickId": 1 }, { "col": 18, "row": 1, "brickId": 4 }, { "col": 19, "row": 1, "brickId": 1 }, { "col": 20, "row": 1, "brickId": 4 },
-
-    { "col": 2, "row": 2, "brickId": 1 }, { "col": 4, "row": 2, "brickId": 1 }, { "col": 6, "row": 2, "brickId": 1 }, { "col": 8, "row": 2, "brickId": 1 }, { "col": 10, "row": 2, "brickId": 1 }, { "col": 12, "row": 2, "brickId": 1 }, { "col": 14, "row": 2, "brickId": 1 }, { "col": 16, "row": 2, "brickId": 1 }, { "col": 18, "row": 2, "brickId": 1 }, { "col": 20, "row": 2, "brickId": 1 },
-
-    { "col": 1, "row": 4, "brickId": 2 }, { "col": 22, "row": 4, "brickId": 2 },
-    { "col": 1, "row": 5, "brickId": 2 }, { "col": 22, "row": 5, "brickId": 2 },
-
-    { "col": 4, "row": 5, "brickId": 3 }, { "col": 5, "row": 5, "brickId": 5 }, { "col": 6, "row": 5, "brickId": 3 }, { "col": 7, "row": 5, "brickId": 5 }, { "col": 8, "row": 5, "brickId": 3 }, { "col": 9, "row": 5, "brickId": 5 }, { "col": 10, "row": 5, "brickId": 3 }, { "col": 11, "row": 5, "brickId": 5 }, { "col": 12, "row": 5, "brickId": 3 }, { "col": 13, "row": 5, "brickId": 5 }, { "col": 14, "row": 5, "brickId": 3 }, { "col": 15, "row": 5, "brickId": 5 }, { "col": 16, "row": 5, "brickId": 3 }, { "col": 17, "row": 5, "brickId": 5 }, { "col": 18, "row": 5, "brickId": 3 },
-
-    { "col": 6, "row": 7, "brickId": 4 }, { "col": 7, "row": 7, "brickId": 1 }, { "col": 8, "row": 7, "brickId": 4 }, { "col": 9, "row": 7, "brickId": 1 }, { "col": 10, "row": 7, "brickId": 4 }, { "col": 11, "row": 7, "brickId": 1 }, { "col": 12, "row": 7, "brickId": 4 }, { "col": 13, "row": 7, "brickId": 1 }, { "col": 14, "row": 7, "brickId": 4 }, { "col": 15, "row": 7, "brickId": 1 }, { "col": 16, "row": 7, "brickId": 4 }, { "col": 17, "row": 7, "brickId": 1 },
-
-    { "col": 4, "row": 9, "brickId": 1 }, { "col": 5, "row": 9, "brickId": 1 }, { "col": 6, "row": 9, "brickId": 4 }, { "col": 7, "row": 9, "brickId": 1 }, { "col": 8, "row": 9, "brickId": 4 }, { "col": 9, "row": 9, "brickId": 1 }, { "col": 10, "row": 9, "brickId": 4 }, { "col": 11, "row": 9, "brickId": 1 }, { "col": 12, "row": 9, "brickId": 4 }, { "col": 13, "row": 9, "brickId": 1 }, { "col": 14, "row": 9, "brickId": 4 }, { "col": 15, "row": 9, "brickId": 1 }, { "col": 16, "row": 9, "brickId": 4 }, { "col": 17, "row": 9, "brickId": 1 }, { "col": 18, "row": 9, "brickId": 1 },
-
-    { "col": 8, "row": 11, "brickId": 5 }, { "col": 9, "row": 11, "brickId": 5 }, { "col": 10, "row": 11, "brickId": 5 }, { "col": 13, "row": 11, "brickId": 5 }, { "col": 14, "row": 11, "brickId": 5 }, { "col": 15, "row": 11, "brickId": 5 }
-  ]
-}
\ No newline at end of file
Index: src/main/resources/assets/levels/levels.txt
===================================================================
diff --git a/src/main/resources/assets/levels/levels.txt b/src/main/resources/assets/levels/levels.txt
deleted file mode 100644
--- a/src/main/resources/assets/levels/levels.txt	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,6 +0,0 @@
-# Default levels
-
-level_01.json
-level_02.json
-level_03.json
-level_04.json
Index: src/main/java/org/overb/arkanoidfx/game/ui/HUDManager.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/HUDManager.java b/src/main/java/org/overb/arkanoidfx/game/ui/HUDManager.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/HUDManager.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,114 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.scene.paint.Color;
-import javafx.scene.text.Text;
-import org.overb.arkanoidfx.game.GameSession;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-public final class HUDManager {
-
-    private Text hudScore;
-    private Text hudCombo;
-    private Text hudLives;
-    private Text hudMultiplier;
-    private Text hudLevel;
-    private Text hudFps;
-    private long fpsFrames = 0;
-    private TimerAction fpsTimer;
-
-    public void initHUD() {
-        if (hudScore == null) {
-            hudScore = new Text();
-            hudCombo = new Text();
-            hudLives = new Text();
-            hudMultiplier = new Text();
-            hudLevel = new Text();
-            hudFps = new Text("FPS: --");
-
-            hudScore.setFill(Color.WHITE);
-            hudCombo.setFill(Color.LIGHTGRAY);
-            hudLives.setFill(Color.WHITE);
-            hudMultiplier.setFill(Color.LIGHTGREEN);
-            hudLevel.setFill(Color.WHITE);
-            hudFps.setFill(Color.YELLOW);
-        }
-
-        this.show();
-        FXGL.getGameScene().addUINodes(hudScore, hudCombo, hudMultiplier, hudLives, hudLevel, hudFps);
-        if (fpsTimer != null) {
-            fpsTimer.expire();
-            fpsTimer = null;
-        }
-        fpsFrames = 0;
-        fpsTimer = FXGL.getGameTimer().runAtInterval(() -> {
-            hudFps.setText("FPS: " + fpsFrames);
-            fpsFrames = 0;
-            layoutBottomRightHorizontal();
-        }, javafx.util.Duration.seconds(1));
-
-        refresh(new GameSession());
-    }
-
-    public void refresh(GameSession session) {
-        if (hudScore == null) {
-            return;
-        }
-        hudScore.setText("Score: " + session.getScoreRounded());
-        hudCombo.setText("Combo: " + session.getCombo());
-        hudMultiplier.setText(String.format("Multiplier: %.2fx", session.getLastMultiplier()));
-        hudLevel.setText("Level: " + session.getCurrentLevel());
-        hudLives.setText("Lives: " + session.getLives());
-        layoutBottomRightHorizontal();
-    }
-
-    public void onFrame() {
-        fpsFrames++;
-    }
-
-    private void layoutBottomRightHorizontal() {
-        double right = ResolutionManager.DESIGN_RESOLUTION.getWidth() - 16;
-        double bottom = ResolutionManager.DESIGN_RESOLUTION.getHeight() - 8;
-
-        hudLives.applyCss();
-        hudScore.applyCss();
-        hudMultiplier.applyCss();
-        hudCombo.applyCss();
-        hudLevel.applyCss();
-        hudFps.applyCss();
-
-        double x = right;
-        x = placeStatusTextElement(hudLives, x, bottom);
-        x = placeStatusTextElement(hudScore, x, bottom);
-        x = placeStatusTextElement(hudMultiplier, x, bottom);
-        x = placeStatusTextElement(hudCombo, x, bottom);
-        x = placeStatusTextElement(hudLevel, x, bottom);
-        x = placeStatusTextElement(hudFps, x, bottom);
-    }
-
-    private double placeStatusTextElement(Text element, double x, double bottom) {
-        x -= element.getLayoutBounds().getWidth();
-        element.setX(x);
-        element.setY(bottom);
-        return x - 16.0;
-    }
-
-    public void hide() {
-        hudLevel.setVisible(false);
-        hudScore.setVisible(false);
-        hudCombo.setVisible(false);
-        hudMultiplier.setVisible(false);
-        hudLives.setVisible(false);
-        hudFps.setVisible(false);
-    }
-
-    public void show() {
-        hudLevel.setVisible(true);
-        hudScore.setVisible(true);
-        hudCombo.setVisible(true);
-        hudMultiplier.setVisible(true);
-        hudLives.setVisible(true);
-        hudFps.setVisible(true);
-    }
-}
Index: src/main/resources/assets/levels/level_01.json
===================================================================
diff --git a/src/main/resources/assets/levels/level_01.json b/src/main/resources/assets/levels/level_01.json
deleted file mode 100644
--- a/src/main/resources/assets/levels/level_01.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,12 +0,0 @@
-{
-  "cols": 24,
-  "rows": 18,
-  "music": "level_01.mp3",
-  "background": "neon-cubes-pink-jt-2560x1440.jpg",
-  "cells": [
-    { "col": 0, "row": 4, "brickId": 5 }, { "col": 2, "row": 4, "brickId": 5 }, { "col": 4, "row": 4, "brickId": 5 }, { "col": 6, "row": 4, "brickId": 5 }, { "col": 8, "row": 4, "brickId": 5 }, { "col": 10, "row": 4, "brickId": 5 }, { "col": 12, "row": 4, "brickId": 5 }, { "col": 14, "row": 4, "brickId": 5 }, { "col": 16, "row": 4, "brickId": 5 }, { "col": 18, "row": 4, "brickId": 5 }, { "col": 20, "row": 4, "brickId": 5 }, { "col": 22, "row": 4, "brickId": 5 },
-    { "col": 1, "row": 5, "brickId": 5 }, { "col": 3, "row": 5, "brickId": 5 }, { "col": 5, "row": 5, "brickId": 5 }, { "col": 7, "row": 5, "brickId": 5 }, { "col": 9, "row": 5, "brickId": 5 }, { "col": 11, "row": 5, "brickId": 5 }, { "col": 13, "row": 5, "brickId": 5 }, { "col": 15, "row": 5, "brickId": 5 }, { "col": 17, "row": 5, "brickId": 5 }, { "col": 19, "row": 5, "brickId": 5 }, { "col": 21, "row": 5, "brickId": 5 }, { "col": 23, "row": 5, "brickId": 5 },
-    { "col": 0, "row": 6, "brickId": 5 }, { "col": 2, "row": 6, "brickId": 5 }, { "col": 4, "row": 6, "brickId": 5 }, { "col": 6, "row": 6, "brickId": 5 }, { "col": 8, "row": 6, "brickId": 5 }, { "col": 10, "row": 6, "brickId": 5 }, { "col": 12, "row": 6, "brickId": 5 }, { "col": 14, "row": 6, "brickId": 5 }, { "col": 16, "row": 6, "brickId": 5 }, { "col": 18, "row": 6, "brickId": 5 }, { "col": 20, "row": 6, "brickId": 5 }, { "col": 22, "row": 6, "brickId": 5 },
-    { "col": 1, "row": 7, "brickId": 5 }, { "col": 3, "row": 7, "brickId": 5 }, { "col": 5, "row": 7, "brickId": 5 }, { "col": 7, "row": 7, "brickId": 5 }, { "col": 9, "row": 7, "brickId": 5 }, { "col": 11, "row": 7, "brickId": 5 }, { "col": 13, "row": 7, "brickId": 5 }, { "col": 15, "row": 7, "brickId": 5 }, { "col": 17, "row": 7, "brickId": 5 }, { "col": 19, "row": 7, "brickId": 5 }, { "col": 21, "row": 7, "brickId": 5 }, { "col": 23, "row": 7, "brickId": 5 }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/BallAnimComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/BallAnimComponent.java b/src/main/java/org/overb/arkanoidfx/components/BallAnimComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/BallAnimComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,51 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.component.Component;
-import com.almasb.fxgl.texture.Texture;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.geometry.Rectangle2D;
-import javafx.util.Duration;
-
-public class BallAnimComponent extends Component {
-
-    private final Texture texture;
-    private final int frames;
-    private final int frameW;
-    private final int frameH;
-    private final double frameDurationSec;
-    private int currentFrame = 0;
-    private TimerAction action;
-
-    public BallAnimComponent(Texture texture, int frames, int frameW, int frameH, double frameDurationSec) {
-        this.texture = texture;
-        this.frames = Math.max(1, frames);
-        this.frameW = Math.max(1, frameW);
-        this.frameH = Math.max(1, frameH);
-        this.frameDurationSec = frameDurationSec > 0 ? frameDurationSec : 0.0;
-    }
-
-    @Override
-    public void onAdded() {
-        applyFrame(0);
-        if (frames > 1 && frameDurationSec > 0) {
-            action = FXGL.getGameTimer().runAtInterval(() -> {
-                currentFrame = (currentFrame + 1) % frames;
-                applyFrame(currentFrame);
-            }, Duration.seconds(frameDurationSec));
-        }
-    }
-
-    @Override
-    public void onRemoved() {
-        if (action != null) {
-            action.expire();
-            action = null;
-        }
-    }
-
-    private void applyFrame(int frameIndex) {
-        double x = (double) frameIndex * frameW;
-        texture.setViewport(new Rectangle2D(x, 0, frameW, frameH));
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/world/WallsFactory.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/world/WallsFactory.java b/src/main/java/org/overb/arkanoidfx/game/world/WallsFactory.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/world/WallsFactory.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,94 +0,0 @@
-package org.overb.arkanoidfx.game.world;
-
-import com.almasb.fxgl.dsl.EntityBuilder;
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.physics.BoundingShape;
-import com.almasb.fxgl.physics.HitBox;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Rectangle;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-public final class WallsFactory {
-
-    private Entity safetyWall;
-    private TimerAction safetyWallTimer;
-
-    public void spawnWalls() {
-        new EntityBuilder()
-                .type(EntityType.WALL_LEFT)
-                .at(0, 0)
-                .bbox(new HitBox(BoundingShape.box(2, ResolutionManager.DESIGN_RESOLUTION.getHeight())))
-                .with(new CollidableComponent(true))
-                .buildAndAttach();
-        new EntityBuilder()
-                .type(EntityType.WALL_RIGHT)
-                .at(ResolutionManager.DESIGN_RESOLUTION.getWidth() - 2, 0)
-                .bbox(new HitBox(BoundingShape.box(2, ResolutionManager.DESIGN_RESOLUTION.getHeight())))
-                .with(new CollidableComponent(true))
-                .buildAndAttach();
-        new EntityBuilder()
-                .type(EntityType.WALL_TOP)
-                .at(0, -2)
-                .bbox(new HitBox(BoundingShape.box(ResolutionManager.DESIGN_RESOLUTION.getWidth(), 2)))
-                .with(new CollidableComponent(true))
-                .buildAndAttach();
-        new EntityBuilder()
-                .type(EntityType.WALL_BOTTOM_SENSOR)
-                .at(0, ResolutionManager.DESIGN_RESOLUTION.getHeight() - 2)
-                .bbox(new HitBox(BoundingShape.box(ResolutionManager.DESIGN_RESOLUTION.getWidth(), 50)))
-                .with(new CollidableComponent(true))
-                .buildAndAttach();
-    }
-
-    public void enableSafetyWall(double durationSeconds) {
-        if (safetyWall == null || !safetyWall.isActive()) {
-            double sceneWidth = ResolutionManager.DESIGN_RESOLUTION.getWidth();
-            double viewHeight = 8.0;
-            double bboxHeight = 8.0;
-            double y = ResolutionManager.DESIGN_RESOLUTION.getHeight() - 40.0;
-            safetyWall = new EntityBuilder()
-                    .type(EntityType.WALL_SAFETY)
-                    .at(0, y)
-                    .view(new Rectangle(sceneWidth, viewHeight, Color.color(0, 1, 0, 0.3)))
-                    .bbox(new HitBox(BoundingShape.box(sceneWidth, bboxHeight)))
-                    .with(new CollidableComponent(true))
-                    .buildAndAttach();
-            pushBallsAboveSafetyWall();
-            FXGL.getGameTimer().runOnceAfter(this::pushBallsAboveSafetyWall, javafx.util.Duration.millis(1));
-        }
-        if (safetyWallTimer != null) {
-            safetyWallTimer.expire();
-        }
-        safetyWallTimer = FXGL.getGameTimer().runOnceAfter(() -> {
-            if (safetyWall != null && safetyWall.isActive()) {
-                safetyWall.removeFromWorld();
-            }
-            safetyWall = null;
-            safetyWallTimer = null;
-        }, javafx.util.Duration.seconds(durationSeconds));
-    }
-
-    private void pushBallsAboveSafetyWall() {
-        if (safetyWall == null || !safetyWall.isActive()){
-            return;
-        }
-        double wallTop = safetyWall.getY();
-        double wallHeight = safetyWall.getHeight() > 0 ? safetyWall.getHeight() : 8.0;
-        double wallBottom = wallTop + wallHeight;
-        double epsilon = 1.0;
-
-        var balls = FXGL.getGameWorld().getEntitiesByType(EntityType.BALL);
-        for (Entity ball : balls) {
-            double ballTop = ball.getY();
-            double ballBottom = ball.getY() + ball.getHeight();
-            boolean overlapsVertically = ballBottom > wallTop && ballTop < wallBottom;
-            if (overlapsVertically) {
-                ball.setY(wallTop - ball.getHeight() - epsilon);
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/audio/AudioMixer.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/audio/AudioMixer.java b/src/main/java/org/overb/arkanoidfx/audio/AudioMixer.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/audio/AudioMixer.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,46 +0,0 @@
-package org.overb.arkanoidfx.audio;
-
-import lombok.Getter;
-
-@Getter
-public final class AudioMixer {
-
-    private static final AudioMixer INSTANCE = new AudioMixer();
-    private double masterVolume = 0.8;
-    private double musicVolume = 0.5;
-    private double sfxVolume = 1.0;
-
-    public static AudioMixer getInstance() {
-        return INSTANCE;
-    }
-
-    public void setMasterVolume(double v) {
-        masterVolume = clamp01(v);
-        applyMusicVolume();
-    }
-
-    public void setMusicVolume(double v) {
-        musicVolume = clamp01(v);
-        applyMusicVolume();
-    }
-
-    public void setSfxVolume(double v) {
-        sfxVolume = clamp01(v);
-    }
-
-    public double getEffectiveMusicVolume() {
-        return clamp01(masterVolume * musicVolume);
-    }
-
-    public double getEffectiveSfxVolume() {
-        return clamp01(masterVolume * sfxVolume);
-    }
-
-    private void applyMusicVolume() {
-        MusicBus.getInstance().refreshVolume();
-    }
-
-    private static double clamp01(double v) {
-        return Math.max(0.0, Math.min(1.0, v));
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/PaddleAnimComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/PaddleAnimComponent.java b/src/main/java/org/overb/arkanoidfx/components/PaddleAnimComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/PaddleAnimComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,51 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.component.Component;
-import com.almasb.fxgl.texture.Texture;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.geometry.Rectangle2D;
-import javafx.util.Duration;
-
-public class PaddleAnimComponent extends Component {
-
-    private final Texture texture;
-    private final int frames;
-    private final int frameW;
-    private final int frameH;
-    private final double frameDurationSec;
-    private int currentFrame = 0;
-    private TimerAction action;
-
-    public PaddleAnimComponent(Texture texture, int frames, int frameW, int frameH, double frameDurationSec) {
-        this.texture = texture;
-        this.frames = Math.max(1, frames);
-        this.frameW = Math.max(1, frameW);
-        this.frameH = Math.max(1, frameH);
-        this.frameDurationSec = Math.max(0.0, frameDurationSec);
-    }
-
-    @Override
-    public void onAdded() {
-        applyFrame(0);
-        if (frames > 1 && frameDurationSec > 0) {
-            action = FXGL.getGameTimer().runAtInterval(() -> {
-                currentFrame = (currentFrame + 1) % frames;
-                applyFrame(currentFrame);
-            }, Duration.seconds(frameDurationSec));
-        }
-    }
-
-    @Override
-    public void onRemoved() {
-        if (action != null) {
-            action.expire();
-            action = null;
-        }
-    }
-
-    private void applyFrame(int frameIndex) {
-        double x = (double) frameIndex * frameW;
-        texture.setViewport(new Rectangle2D(x, 0, frameW, frameH));
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/text/paddles.json
===================================================================
diff --git a/src/main/resources/assets/text/paddles.json b/src/main/resources/assets/text/paddles.json
deleted file mode 100644
--- a/src/main/resources/assets/text/paddles.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,69 +0,0 @@
-{
-  "paddles": [
-    {
-      "id": 1,
-      "name": "default",
-      "sizeW": 954,
-      "sizeH": 136,
-      "visual": {
-        "sprite": "paddle_basic.png",
-        "frames": 1,
-        "frameW": 954,
-        "frameH": 136,
-        "frameDuration": 0
-      }
-    },
-    {
-      "id": 2,
-      "name": "neon",
-      "sizeW": 954,
-      "sizeH": 136,
-      "visual": {
-        "sprite": "paddle_neon.png",
-        "frames": 1,
-        "frameW": 954,
-        "frameH": 136,
-        "frameDuration": 0
-      }
-    },
-    {
-      "id": 3,
-      "name": "neon_retro",
-      "sizeW": 954,
-      "sizeH": 136,
-      "visual": {
-        "sprite": "paddle_neon_retro.png",
-        "frames": 1,
-        "frameW": 954,
-        "frameH": 136,
-        "frameDuration": 0
-      }
-    },
-    {
-      "id": 4,
-      "name": "ai",
-      "sizeW": 954,
-      "sizeH": 136,
-      "visual": {
-        "sprite": "paddle_ai.png",
-        "frames": 1,
-        "frameW": 954,
-        "frameH": 136,
-        "frameDuration": 0
-      }
-    },
-    {
-      "id": 5,
-      "name": "gold",
-      "sizeW": 954,
-      "sizeH": 136,
-      "visual": {
-        "sprite": "paddle_gold.png",
-        "frames": 1,
-        "frameW": 954,
-        "frameH": 136,
-        "frameDuration": 0
-      }
-    }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/enums/EntityType.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/enums/EntityType.java b/src/main/java/org/overb/arkanoidfx/enums/EntityType.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/enums/EntityType.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,25 +0,0 @@
-package org.overb.arkanoidfx.enums;
-
-import lombok.Getter;
-
-public enum EntityType {
-    PADDLE(200, 30),
-    BALL(25, 25),
-    BRICK(80, 30),
-    SURPRISE(30, 30),
-    WALL_LEFT(10, 1080),
-    WALL_RIGHT(10, 1080),
-    WALL_TOP(1920, 10),
-    WALL_BOTTOM_SENSOR(1920, 10),
-    WALL_SAFETY(1920, 10);
-
-    @Getter
-    private final double designWidth;
-    @Getter
-    private final double designHeight;
-
-    EntityType(double designWidth, double designHeight) {
-        this.designWidth = designWidth;
-        this.designHeight = designHeight;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/BallComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/BallComponent.java b/src/main/java/org/overb/arkanoidfx/components/BallComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/BallComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,416 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.component.Component;
-import javafx.geometry.Point2D;
-import javafx.geometry.Rectangle2D;
-import lombok.Getter;
-import lombok.Setter;
-import org.overb.arkanoidfx.audio.SfxBus;
-import org.overb.arkanoidfx.enums.Axis;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.enums.EventType;
-import org.overb.arkanoidfx.game.core.EventBus;
-import org.overb.arkanoidfx.game.core.GameEvent;
-
-public class BallComponent extends Component {
-
-    private static final double BASE_SPEED = 700.0; // pixels/sec at 1080p
-    private static final double MIN_SPEED_MULTIPLIER = 0.5;
-    private static final double MAX_SPEED_MULTIPLIER = 2.4;
-    private static final double STEP_FRACTION_OF_BALL = 0.15;
-    private static final int MAX_SUBSTEPS_PER_FRAME = 64;
-    private static final double NUDGE = 0.25; // small nudge after bounce to avoid hitting the same brick twice
-    private static final int CONTACT_SEARCH_ITERS = 3; // binary search iterations to find contact
-    // anti-trap parameters
-    private static final double MIN_ABS_VY = 60.0;      // minimum vertical speed component after any bounce
-    private static final double TINY_JITTER_RAD = 0.02; // small jitter to avoid infinite vertical bouncing
-
-    private final Entity paddle;
-    @Getter
-    private boolean launched = false;
-
-    @Getter
-    @Setter
-    private Point2D velocity = Point2D.ZERO;
-    private double speedMultiplier = 1.0;
-    private String sndHitWall;
-    private String sndHitPaddle;
-    private String sndLost;
-
-    public BallComponent(Entity paddle) {
-        this.paddle = paddle;
-    }
-
-    public void setSounds(String hitWall, String hitPaddle, String lost) {
-        this.sndHitWall = hitWall;
-        this.sndHitPaddle = hitPaddle;
-        this.sndLost = lost;
-    }
-
-    public void playWallHit() {
-        SfxBus.getInstance().play(sndHitWall);
-    }
-
-    public void playPaddleHit() {
-        SfxBus.getInstance().play(sndHitPaddle);
-    }
-
-    public void playLost() {
-        SfxBus.getInstance().play(sndLost);
-    }
-
-    @Override
-    public void onUpdate(double timePerFrame) {
-        if (!launched) {
-            double px = paddle.getX();
-            double pw = paddle.getWidth();
-            double py = paddle.getY();
-            double ballW = entity.getWidth();
-            entity.setX(px + pw / 2.0 - ballW / 2.0);
-            entity.setY(py - entity.getHeight() - 4.0);
-            return;
-        }
-        moveWithSubsteps(timePerFrame);
-    }
-
-    private void moveWithSubsteps(double timePerFrame) {
-        double speed = velocity.magnitude();
-        if (speed <= 0) return;
-        double ballSize = Math.max(entity.getWidth(), entity.getHeight());
-        double maxStep = Math.max(1.0, ballSize * STEP_FRACTION_OF_BALL);
-        int steps = (int) Math.ceil((speed * timePerFrame) / maxStep);
-        steps = Math.min(steps, MAX_SUBSTEPS_PER_FRAME);
-        double remainingFrameTime = timePerFrame;
-        for (int i = 0; i < steps && remainingFrameTime > 0; i++) {
-            // slice time per substep to not exceed the frame
-            double sliceTime = Math.min(remainingFrameTime, maxStep / Math.max(1e-6, speed));
-            remainingFrameTime -= sliceTime;
-            // there may be multiple collisions within this slice if the ball is fast
-            double timeLeft = sliceTime;
-            for (int guard = 0; guard < 8 && timeLeft > 1e-6; guard++) {
-                Point2D v = velocity;
-                double vLen = v.magnitude();
-                if (vLen < 1e-6) {
-                    break;
-                }
-                Point2D dir = new Point2D(v.getX() / vLen, v.getY() / vLen);
-                double maxTravel = vLen * timeLeft;
-
-                // find the earliest time of impact
-                TOI best = findEarliestTOI(dir, maxTravel);
-                if (best == null || best.distance > maxTravel) {
-                    // no hit this time, continue
-                    entity.translate(dir.multiply(maxTravel));
-                    break;
-                }
-                // advance to impact
-                double travel = Math.max(0, best.distance - 1e-4); // tiny epsilon to avoid initial overlap
-                if (travel > 0) {
-                    entity.translate(dir.multiply(travel));
-                }
-                switch (best.target) {
-                    case WALL_LEFT:
-                    case WALL_RIGHT:
-                        bounceHorizontal();
-                        playWallHit();
-                        break;
-                    case WALL_TOP:
-                    case WALL_SAFETY:
-                        bounceVertical();
-                        playWallHit();
-                        break;
-                    case WALL_BOTTOM_SENSOR:
-                        entity.removeFromWorld();
-                        if (FXGL.getGameWorld().getEntitiesByType(EntityType.BALL).isEmpty()) {
-                            playLost();
-                            EventBus.publish(GameEvent.of(EventType.BALL_LOST));
-                        }
-                        return;
-                    case PADDLE:
-                        reflectFromPaddle(paddle);
-                        playPaddleHit();
-                        break;
-                    case BRICK:
-                        best.brickHitCallbackIfAny();
-                        Axis ax = chooseBounceAxisCircleRect(getBallCenter(entity), best.targetBox);
-                        if (ax == Axis.HORIZONTAL) {
-                            bounceHorizontal();
-                        } else {
-                            bounceVertical();
-                        }
-                        break;
-                }
-                enforceMinVerticalComponent();
-                // nudge to avoid recollision with same brick next frame
-                Point2D newDir = normalized(velocity);
-                entity.translate(newDir.multiply(NUDGE));
-                // consume the time associated with the distance at the previous ball velocity
-                double usedTime = best.distance / vLen;
-                timeLeft = Math.max(0, timeLeft - usedTime);
-            }
-        }
-    }
-
-    private void enforceMinVerticalComponent() {
-        double speed = velocity.magnitude();
-        if (speed <= 1e-6) return;
-        double vx = velocity.getX();
-        double vy = velocity.getY();
-        if (Math.abs(vy) < MIN_ABS_VY) {
-            double signY = (vy >= 0) ? 1.0 : -1.0;
-            vy = signY * MIN_ABS_VY;
-            double vxSign = Math.signum(vx == 0 ? 1 : vx);
-            double newVx = Math.sqrt(Math.max(0.0, speed * speed - vy * vy)) * vxSign;
-            velocity = new Point2D(newVx, vy);
-            if (Math.abs(velocity.getY()) < MIN_ABS_VY * 0.75) {
-                velocity = rotate(velocity, (vy >= 0 ? 1 : -1) * TINY_JITTER_RAD);
-            }
-        }
-    }
-
-    private static Point2D rotate(Point2D v, double angleRad) {
-        double c = Math.cos(angleRad);
-        double s = Math.sin(angleRad);
-        return new Point2D(v.getX() * c - v.getY() * s, v.getX() * s + v.getY() * c);
-    }
-
-    private static Rectangle2D getAABB(Entity e) {
-        double x = e.getX();
-        double y = e.getY();
-        double w = e.getWidth();
-        double h = e.getHeight();
-        return new Rectangle2D(x, y, w, h);
-    }
-
-    private static Point2D getBallCenter(Entity e) {
-        return new Point2D(e.getX() + e.getWidth() / 2.0, e.getY() + e.getHeight() / 2.0);
-    }
-
-    private static double getBallRadius(Entity e) {
-        return Math.min(e.getWidth(), e.getHeight()) / 2.0;
-    }
-
-    private static Axis chooseBounceAxisCircleRect(Point2D c, Rectangle2D rect) {
-        double closestX = Math.max(rect.getMinX(), Math.min(c.getX(), rect.getMaxX()));
-        double closestY = Math.max(rect.getMinY(), Math.min(c.getY(), rect.getMaxY()));
-        double dx = c.getX() - closestX;
-        double dy = c.getY() - closestY;
-        if (Math.abs(dx) > Math.abs(dy)) {
-            return Axis.HORIZONTAL;
-        } else {
-            return Axis.VERTICAL;
-        }
-    }
-
-    private static class TOI {
-        double distance;
-        EntityType target;
-        Rectangle2D targetBox;
-        Entity targetEntity;
-        Runnable onHit;
-
-        void brickHitCallbackIfAny() {
-            if (onHit != null) onHit.run();
-        }
-    }
-
-    private TOI findEarliestTOI(Point2D dirUnit, double maxDistance) {
-        TOI best = null;
-        Point2D c = getBallCenter(entity);
-        double r = getBallRadius(entity);
-
-        // Walls
-        var world = FXGL.getGameWorld();
-        var walls = world.getEntitiesByType(EntityType.WALL_LEFT, EntityType.WALL_RIGHT, EntityType.WALL_TOP, EntityType.WALL_BOTTOM_SENSOR, EntityType.WALL_SAFETY);
-        for (Entity wall : walls) {
-            EntityType type = (EntityType) wall.getTypeComponent().getValue();
-            if (type == EntityType.WALL_SAFETY && velocity.getY() < 0) {
-                continue;
-            }
-            Rectangle2D ra = getAABB(wall);
-            TOI hit = sweepCircleAgainstAABB(c, dirUnit, r, ra);
-            if (hit != null && hit.distance <= maxDistance) {
-                if (type == EntityType.WALL_LEFT) hit.target = EntityType.WALL_LEFT;
-                else if (type == EntityType.WALL_RIGHT) hit.target = EntityType.WALL_RIGHT;
-                else if (type == EntityType.WALL_TOP) hit.target = EntityType.WALL_TOP;
-                else if (type == EntityType.WALL_BOTTOM_SENSOR) hit.target = EntityType.WALL_BOTTOM_SENSOR;
-                else if (type == EntityType.WALL_SAFETY) hit.target = EntityType.WALL_SAFETY;
-                hit.targetEntity = wall;
-                best = pickBetter(best, hit);
-            }
-        }
-
-        // paddle (only if moving down)
-        if (paddle != null && paddle.isActive() && velocity.getY() > 0) {
-            Rectangle2D pr = getAABB(paddle);
-            TOI hit = sweepCircleAgainstAABB(c, dirUnit, r, pr);
-            if (hit != null && hit.distance <= maxDistance) {
-                hit.target = EntityType.PADDLE;
-                hit.targetEntity = paddle;
-                best = pickBetter(best, hit);
-            }
-        }
-
-        // bricks
-        var bricks = FXGL.getGameWorld().getEntitiesByType(EntityType.BRICK).stream().filter(Entity::isActive).toList();
-        for (Entity brick : bricks) {
-            var bc = brick.getComponentOptional(BrickComponent.class);
-            if (bc.isEmpty() || bc.get().isDestroyed()) continue;
-            Rectangle2D br = getAABB(brick);
-            TOI hit = sweepCircleAgainstAABB(c, dirUnit, r, br);
-            if (hit != null && hit.distance <= maxDistance) {
-                hit.target = EntityType.BRICK;
-                hit.targetEntity = brick;
-                hit.onHit = () -> bc.ifPresent(comp -> comp.onBallHit(entity));
-                best = pickBetter(best, hit);
-            }
-        }
-
-        return best;
-    }
-
-    private static TOI pickBetter(TOI current, TOI candidate) {
-        if (candidate == null) return current;
-        if (current == null) return candidate;
-        return candidate.distance < current.distance ? candidate : current;
-    }
-
-    // Swept circle vs AABB using Minkowski sum (expand rect by radius and cast point)
-    private static TOI sweepCircleAgainstAABB(Point2D c, Point2D dirUnit, double r, Rectangle2D rect) {
-        // Expand rectangle by radius
-        Rectangle2D expanded = new Rectangle2D(rect.getMinX() - r, rect.getMinY() - r,
-                rect.getWidth() + 2 * r, rect.getHeight() + 2 * r);
-        // Ray from c in dirUnit. Compute t to each slab and take entry time
-        double tx1, tx2, ty1, ty2;
-        double dx = dirUnit.getX();
-        double dy = dirUnit.getY();
-        double tminX, tmaxX, tminY, tmaxY;
-        double eps = 1e-8;
-        if (Math.abs(dx) < eps) {
-            if (c.getX() < expanded.getMinX() || c.getX() > expanded.getMaxX()) return null;
-            tminX = Double.NEGATIVE_INFINITY;
-            tmaxX = Double.POSITIVE_INFINITY;
-        } else {
-            tx1 = (expanded.getMinX() - c.getX()) / dx;
-            tx2 = (expanded.getMaxX() - c.getX()) / dx;
-            tminX = Math.min(tx1, tx2);
-            tmaxX = Math.max(tx1, tx2);
-        }
-        if (Math.abs(dy) < eps) {
-            if (c.getY() < expanded.getMinY() || c.getY() > expanded.getMaxY()) return null;
-            tminY = Double.NEGATIVE_INFINITY;
-            tmaxY = Double.POSITIVE_INFINITY;
-        } else {
-            ty1 = (expanded.getMinY() - c.getY()) / dy;
-            ty2 = (expanded.getMaxY() - c.getY()) / dy;
-            tminY = Math.min(ty1, ty2);
-            tmaxY = Math.max(ty1, ty2);
-        }
-        double tEnter = Math.max(tminX, tminY);
-        double tExit = Math.min(tmaxX, tmaxY);
-        if (tExit < 0) return null; // box is behind
-        if (tEnter > tExit) return null; // miss
-        if (tEnter < 0) tEnter = 0; // already inside expanded box, treat as immediate hit
-        TOI res = new TOI();
-        res.distance = tEnter * Math.hypot(dirUnit.getX(), dirUnit.getY()); // since dirUnit length=1, distance = tEnter
-        res.targetBox = rect;
-        return res;
-    }
-
-    public void launch() {
-        if (launched) return;
-        launched = true;
-        velocity = new Point2D(0, -BASE_SPEED);
-    }
-
-    public double getSpeed() {
-        return velocity.magnitude();
-    }
-
-    public static double getBaseSpeed() {
-        return BASE_SPEED;
-    }
-
-    public void bounceHorizontal() {
-        velocity = new Point2D(-velocity.getX(), velocity.getY());
-    }
-
-    public void bounceVertical() {
-        velocity = new Point2D(velocity.getX(), -velocity.getY());
-    }
-
-    public void reflectFromPaddle(Entity paddle) {
-        if (velocity.getY() <= 0) {
-            return;
-        }
-        double paddleCenterX = paddle.getX() + paddle.getWidth() / 2.0;
-        double ballCenterX = entity.getX() + entity.getWidth() / 2.0;
-        double offset = (ballCenterX - paddleCenterX) / (paddle.getWidth() / 2.0);
-        offset = Math.max(-1.0, Math.min(1.0, offset));
-        double maxH = 0.85;
-        double minH = 0.06;
-        double dx = offset * maxH;
-        if (Math.abs(dx) < minH) {
-            double sign = (Math.abs(offset) >= 1e-6) ? Math.signum(offset) : ((Math.abs(velocity.getX()) >= 1e-6) ? Math.signum(velocity.getX()) : 1.0);
-            dx = sign * minH;
-        }
-        double dy = -Math.sqrt(Math.max(0.0, 1.0 - dx * dx));
-        double currentSpeed = velocity.magnitude();
-        double baseline = Math.max(currentSpeed, BASE_SPEED * speedMultiplier);
-        double angleFactor = Math.abs(offset);
-        double gain = 1.0 + (1.0 - angleFactor) * 0.06;
-        double unclamped = baseline * gain;
-        double maxSpeed = BASE_SPEED * MAX_SPEED_MULTIPLIER;
-        double newSpeed = Math.min(unclamped, maxSpeed);
-        speedMultiplier = clamp(newSpeed / BASE_SPEED);
-        setSpeedDir(new Point2D(dx, dy), newSpeed);
-    }
-
-    public void setLaunchedWithVelocity(Point2D initialVelocity) {
-        if (initialVelocity == null) {
-            return;
-        }
-        launched = true;
-        velocity = initialVelocity;
-    }
-
-    public void boostSpeedByFactor(double factor) {
-        if (factor <= 0) {
-            return;
-        }
-        double currentSpeed = velocity.magnitude();
-        double desiredMultiplier = clamp(speedMultiplier * factor);
-        double desiredSpeed = BASE_SPEED * desiredMultiplier;
-        double newSpeed;
-        if (factor >= 1.0) {
-            newSpeed = Math.max(currentSpeed, desiredSpeed);
-            speedMultiplier = clamp(newSpeed / BASE_SPEED);
-        } else {
-            speedMultiplier = desiredMultiplier;
-            newSpeed = desiredSpeed;
-        }
-        Point2D dir = normalized(velocity);
-        setSpeedDir(dir, newSpeed);
-    }
-
-    private static double clamp(double velocity) {
-        return Math.max(BallComponent.MIN_SPEED_MULTIPLIER, Math.min(BallComponent.MAX_SPEED_MULTIPLIER, velocity));
-    }
-
-    private void setSpeedDir(Point2D dirUnit, double speed) {
-        double len = Math.hypot(dirUnit.getX(), dirUnit.getY());
-        if (len < 1e-6) {
-            velocity = new Point2D(0, -speed);
-        } else {
-            velocity = new Point2D(dirUnit.getX() / len * speed, dirUnit.getY() / len * speed);
-        }
-    }
-
-    private static Point2D normalized(Point2D v) {
-        double len = Math.hypot(v.getX(), v.getY());
-        if (len < 1e-6) return new Point2D(0, -1);
-        return new Point2D(v.getX() / len, v.getY() / len);
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/levels/level_03.json
===================================================================
diff --git a/src/main/resources/assets/levels/level_03.json b/src/main/resources/assets/levels/level_03.json
deleted file mode 100644
--- a/src/main/resources/assets/levels/level_03.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,25 +0,0 @@
-{
-  "cols": 24,
-  "rows": 18,
-  "music": "level_03.mp3",
-  "background": "flowing-objects-abstract-4k-cm-2560x1440.jpg",
-  "cells": [
-    { "col": 2, "row": 1, "brickId": 1 }, { "col": 3, "row": 1, "brickId": 4 }, { "col": 4, "row": 1, "brickId": 1 }, { "col": 5, "row": 1, "brickId": 4 }, { "col": 6, "row": 1, "brickId": 1 }, { "col": 7, "row": 1, "brickId": 4 }, { "col": 8, "row": 1, "brickId": 1 }, { "col": 9, "row": 1, "brickId": 4 }, { "col": 10, "row": 1, "brickId": 1 }, { "col": 11, "row": 1, "brickId": 4 }, { "col": 12, "row": 1, "brickId": 1 }, { "col": 13, "row": 1, "brickId": 4 }, { "col": 14, "row": 1, "brickId": 1 }, { "col": 15, "row": 1, "brickId": 4 }, { "col": 16, "row": 1, "brickId": 1 }, { "col": 17, "row": 1, "brickId": 4 }, { "col": 18, "row": 1, "brickId": 1 }, { "col": 19, "row": 1, "brickId": 4 }, { "col": 20, "row": 1, "brickId": 1 },
-
-    { "col": 2, "row": 2, "brickId": 5 }, { "col": 4, "row": 2, "brickId": 5 }, { "col": 6, "row": 2, "brickId": 5 }, { "col": 8, "row": 2, "brickId": 5 }, { "col": 10, "row": 2, "brickId": 5 }, { "col": 12, "row": 2, "brickId": 5 }, { "col": 14, "row": 2, "brickId": 5 }, { "col": 16, "row": 2, "brickId": 5 }, { "col": 18, "row": 2, "brickId": 5 }, { "col": 20, "row": 2, "brickId": 5 },
-
-    { "col": 3, "row": 3, "brickId": 1 }, { "col": 5, "row": 3, "brickId": 1 }, { "col": 7, "row": 3, "brickId": 1 }, { "col": 9, "row": 3, "brickId": 1 }, { "col": 11, "row": 3, "brickId": 1 }, { "col": 13, "row": 3, "brickId": 1 }, { "col": 15, "row": 3, "brickId": 1 }, { "col": 17, "row": 3, "brickId": 1 }, { "col": 19, "row": 3, "brickId": 1 },
-
-    { "col": 1, "row": 5, "brickId": 2 }, { "col": 22, "row": 5, "brickId": 2 },
-    { "col": 1, "row": 6, "brickId": 2 }, { "col": 22, "row": 6, "brickId": 2 },
-    { "col": 1, "row": 7, "brickId": 2 }, { "col": 22, "row": 7, "brickId": 2 },
-
-    { "col": 4, "row": 6, "brickId": 4 }, { "col": 5, "row": 6, "brickId": 1 }, { "col": 6, "row": 6, "brickId": 4 }, { "col": 7, "row": 6, "brickId": 1 }, { "col": 8, "row": 6, "brickId": 4 }, { "col": 9, "row": 6, "brickId": 1 }, { "col": 10, "row": 6, "brickId": 4 }, { "col": 11, "row": 6, "brickId": 1 }, { "col": 12, "row": 6, "brickId": 4 }, { "col": 13, "row": 6, "brickId": 1 }, { "col": 14, "row": 6, "brickId": 4 }, { "col": 15, "row": 6, "brickId": 1 }, { "col": 16, "row": 6, "brickId": 4 }, { "col": 17, "row": 6, "brickId": 1 }, { "col": 18, "row": 6, "brickId": 4 },
-
-    { "col": 6, "row": 8, "brickId": 3 }, { "col": 6, "row": 9, "brickId": 3 }, { "col": 6, "row": 10, "brickId": 3 },
-    { "col": 17, "row": 8, "brickId": 3 }, { "col": 17, "row": 9, "brickId": 3 }, { "col": 17, "row": 10, "brickId": 3 },
-
-    { "col": 8, "row": 9, "brickId": 1 }, { "col": 9, "row": 9, "brickId": 4 }, { "col": 10, "row": 9, "brickId": 1 }, { "col": 11, "row": 9, "brickId": 4 }, { "col": 12, "row": 9, "brickId": 1 }, { "col": 13, "row": 9, "brickId": 4 }, { "col": 14, "row": 9, "brickId": 1 },
-    { "col": 8, "row": 10, "brickId": 1 }, { "col": 10, "row": 10, "brickId": 1 }, { "col": 12, "row": 10, "brickId": 1 }, { "col": 14, "row": 10, "brickId": 1 }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/PaddleComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/PaddleComponent.java b/src/main/java/org/overb/arkanoidfx/components/PaddleComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/PaddleComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,33 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.component.Component;
-import javafx.geometry.Point2D;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-public class PaddleComponent extends Component {
-
-    private final double halfWidth;
-    private final double yFixed;
-
-    public PaddleComponent(double width, double y) {
-        this.halfWidth = width / 2.0;
-        this.yFixed = y;
-    }
-
-    @Override
-    public void onAdded() {
-        entity.setY(yFixed);
-    }
-
-    @Override
-    public void onUpdate(double tpf) {
-        Point2D mouse = FXGL.getInput().getMousePositionWorld();
-        double x = mouse.getX() - halfWidth;
-        double minX = 0;
-        double maxX = ResolutionManager.DESIGN_RESOLUTION.getWidth() - halfWidth * 2.0;
-        if (x < minX) x = minX;
-        if (x > maxX) x = maxX;
-        entity.setX(x);
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/entities/BrickEntity.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/BrickEntity.java b/src/main/java/org/overb/arkanoidfx/entities/BrickEntity.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/BrickEntity.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,18 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class BrickEntity {
-    public int id;
-    public String name;
-    public Sprite visual;
-    public int hp;
-    public int points;
-    public String hitSound;
-    public String destroySound;
-    public boolean animated;
-    public boolean damageAdvancesFrame;
-    public Sprite breakAnim;     // nullable
-    public double speedEffect;   // e.g., +0.05 => +5%
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/util/BallQueries.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/util/BallQueries.java b/src/main/java/org/overb/arkanoidfx/util/BallQueries.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/util/BallQueries.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,20 +0,0 @@
-package org.overb.arkanoidfx.util;
-
-import com.almasb.fxgl.dsl.FXGL;
-import org.overb.arkanoidfx.components.BallComponent;
-import org.overb.arkanoidfx.enums.EntityType;
-
-public final class BallQueries {
-
-    private BallQueries() {}
-
-    public static double findMaxBallSpeed() {
-        return FXGL.getGameWorld()
-                .getEntitiesByType(EntityType.BALL)
-                .stream()
-                .map(e -> e.getComponentOptional(BallComponent.class).map(BallComponent::getSpeed).orElse(0.0))
-                .mapToDouble(Double::doubleValue)
-                .max()
-                .orElse(0.0);
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/levels/level_02.json
===================================================================
diff --git a/src/main/resources/assets/levels/level_02.json b/src/main/resources/assets/levels/level_02.json
deleted file mode 100644
--- a/src/main/resources/assets/levels/level_02.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,17 +0,0 @@
-{
-  "cols": 24,
-  "rows": 18,
-  "music": "level_02.mp3",
-  "background": "colored-lines-hugging-shapes-5k-6u-2560x1440.jpg",
-  "cells": [
-    { "col": 3, "row": 2, "brickId": 1 }, { "col": 4, "row": 2, "brickId": 1 }, { "col": 5, "row": 2, "brickId": 1 }, { "col": 6, "row": 2, "brickId": 1 }, { "col": 7, "row": 2, "brickId": 1 }, { "col": 8, "row": 2, "brickId": 1 }, { "col": 9, "row": 2, "brickId": 1 }, { "col": 10, "row": 2, "brickId": 1 }, { "col": 11, "row": 2, "brickId": 1 }, { "col": 12, "row": 2, "brickId": 1 }, { "col": 13, "row": 2, "brickId": 1 }, { "col": 14, "row": 2, "brickId": 1 }, { "col": 15, "row": 2, "brickId": 1 }, { "col": 16, "row": 2, "brickId": 1 }, { "col": 17, "row": 2, "brickId": 1 }, { "col": 18, "row": 2, "brickId": 1 }, { "col": 19, "row": 2, "brickId": 1 }, { "col": 20, "row": 2, "brickId": 1 },
-    { "col": 3, "row": 9, "brickId": 1 }, { "col": 4, "row": 9, "brickId": 1 }, { "col": 5, "row": 9, "brickId": 1 }, { "col": 6, "row": 9, "brickId": 1 }, { "col": 7, "row": 9, "brickId": 1 }, { "col": 8, "row": 9, "brickId": 1 }, { "col": 9, "row": 9, "brickId": 1 }, { "col": 10, "row": 9, "brickId": 1 }, { "col": 11, "row": 9, "brickId": 1 },
-    { "col": 12, "row": 9, "brickId": 1 }, { "col": 13, "row": 9, "brickId": 1 }, { "col": 14, "row": 9, "brickId": 1 }, { "col": 15, "row": 9, "brickId": 1 }, { "col": 16, "row": 9, "brickId": 1 }, { "col": 17, "row": 9, "brickId": 1 }, { "col": 18, "row": 9, "brickId": 1 }, { "col": 19, "row": 9, "brickId": 1 }, { "col": 20, "row": 9, "brickId": 1 },
-    { "col": 3, "row": 3, "brickId": 1 }, { "col": 3, "row": 4, "brickId": 1 }, { "col": 3, "row": 5, "brickId": 1 }, { "col": 3, "row": 6, "brickId": 1 }, { "col": 3, "row": 7, "brickId": 1 }, { "col": 3, "row": 8, "brickId": 1 },
-    { "col": 20, "row": 3, "brickId": 1 }, { "col": 20, "row": 4, "brickId": 1 }, { "col": 20, "row": 5, "brickId": 1 }, { "col": 20, "row": 6, "brickId": 1 }, { "col": 20, "row": 7, "brickId": 1 }, { "col": 20, "row": 8, "brickId": 1 },
-    { "col": 10, "row": 9, "brickId": 0 }, { "col": 11, "row": 9, "brickId": 0 }, { "col": 12, "row": 9, "brickId": 0 }, { "col": 13, "row": 9, "brickId": 0 },
-    { "col": 6, "row": 5, "brickId": 3 }, { "col": 6, "row": 6, "brickId": 3 }, { "col": 6, "row": 7, "brickId": 3 },
-    { "col": 17, "row": 5, "brickId": 3 }, { "col": 17, "row": 6, "brickId": 3 }, { "col": 17, "row": 7, "brickId": 3 },
-    { "col": 8, "row": 4, "brickId": 4 }, { "col": 9, "row": 4, "brickId": 4 }, { "col": 10, "row": 4, "brickId": 4 }, { "col": 13, "row": 4, "brickId": 4 }, { "col": 14, "row": 4, "brickId": 4 }, { "col": 15, "row": 4, "brickId": 4 }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/ConfigOptions.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/ConfigOptions.java b/src/main/java/org/overb/arkanoidfx/ConfigOptions.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/ConfigOptions.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,17 +0,0 @@
-package org.overb.arkanoidfx;
-
-public class ConfigOptions {
-    public int width = 1920;
-    public int height = 1080;
-    public String fullscreenMode = "WINDOWED";
-    public int nativeW = 1920;
-    public int nativeH = 1080;
-
-    public AudioCfg audio = new AudioCfg();
-
-    public static class AudioCfg {
-        public double master = 1.0;
-        public double music = 0.7;
-        public double sfx = 0.8;
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/game/LevelManager.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/LevelManager.java b/src/main/java/org/overb/arkanoidfx/game/LevelManager.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/LevelManager.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,266 +0,0 @@
-package org.overb.arkanoidfx.game;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import javafx.scene.Cursor;
-import javafx.scene.image.Image;
-import javafx.scene.layout.*;
-import javafx.scene.paint.Color;
-import lombok.Setter;
-import lombok.extern.java.Log;
-import org.overb.arkanoidfx.ArkanoidApp;
-import org.overb.arkanoidfx.audio.MusicService;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.entities.LevelEntity;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.loaders.LevelLoader;
-import org.overb.arkanoidfx.game.ui.HUDManager;
-import org.overb.arkanoidfx.game.ui.InGameMenuUI;
-import org.overb.arkanoidfx.game.ui.MouseUI;
-import org.overb.arkanoidfx.game.ui.ShatteredOverlay;
-import org.overb.arkanoidfx.game.world.BallFactory;
-import org.overb.arkanoidfx.game.world.PaddleFactory;
-import org.overb.arkanoidfx.game.world.WallsFactory;
-
-import java.util.List;
-
-@Log
-public final class LevelManager {
-
-    public interface MenuReturnHandler {
-        void showMainMenu();
-    }
-
-    private final EntityRepository repository;
-    private final GameSession session;
-    private final HUDManager hudManager;
-    private final WallsFactory wallsFactory;
-    private final PaddleFactory paddleFactory;
-    private final BallFactory ballFactory;
-    private final LevelLoader levelLoader;
-    @Setter
-    private MenuReturnHandler menuReturnHandler;
-
-    private List<String> levelOrder;
-    private int currentLevelIndex = 0;
-    private LevelEntity currentLevel;
-
-    public LevelManager(EntityRepository repository, GameSession session, HUDManager hudManager, WallsFactory wallsFactory,
-                        PaddleFactory paddleFactory, BallFactory ballFactory, LevelLoader levelLoader) {
-        this.repository = repository;
-        this.session = session;
-        this.hudManager = hudManager;
-        this.wallsFactory = wallsFactory;
-        this.paddleFactory = paddleFactory;
-        this.ballFactory = ballFactory;
-        this.levelLoader = levelLoader;
-    }
-
-    public void quitToMainMenuNoDialog() {
-        MusicService.getInstance().stopCurrentMusic();
-        FXGL.getGameWorld().getEntitiesByType(
-                EntityType.BALL, EntityType.SURPRISE, EntityType.BRICK, EntityType.WALL_SAFETY, EntityType.PADDLE
-        ).forEach(e -> {
-            if (e.isActive()) {
-                e.removeFromWorld();
-            }
-        });
-        session.resetForNewGame();
-        currentLevelIndex = 0;
-        returnToMainMenu();
-    }
-
-    private void returnToMainMenu() {
-        FXGL.getGameScene().clearUINodes();
-        FXGL.getGameScene().setBackgroundColor(Color.web("#000000"));
-        MusicService.getInstance().stopCurrentMusic();
-        MusicService.getInstance().play("main_menu.mp3");
-        if (menuReturnHandler != null) {
-            menuReturnHandler.showMainMenu();
-        }
-    }
-
-    public void setLevelOrder(List<String> levelOrder) {
-        this.levelOrder = levelOrder;
-        this.currentLevelIndex = 0;
-    }
-
-    public void startInitialLevel() {
-        if (levelOrder == null || levelOrder.isEmpty()) {
-            throw new IllegalStateException("Level order is not set or empty");
-        }
-        loadAndStart();
-    }
-
-    public void spawnPaddleAndBall() {
-        Entity paddle = paddleFactory.spawnPaddle(currentLevelIndex);
-        ballFactory.spawnBallAttachedToPaddle(paddle);
-        MusicService.getInstance().play(currentLevel.music);
-        hudManager.refresh(session);
-    }
-
-    public void onLevelCleared(Runnable afterDialog) {
-        ShatteredOverlay overlay = ShatteredOverlay.showBackground();
-        cleanupLevelEntities();
-        MusicService.getInstance().stopCurrentMusic();
-        FXGL.getGameController().pauseEngine();
-        hudManager.hide();
-        MouseUI.setMouseVisible(true);
-        ArkanoidApp.setEndStateMenuVisible(true);
-
-        StackPane[] refMenu = new StackPane[1];
-        if(hasNextLevel()) {
-            MusicService.getInstance().play("level_cleared.mp3");
-            refMenu[0] = InGameMenuUI.builder()
-                    .withTitle("Level cleared")
-                    .withMenuItem("Continue", () -> continueToNextLevel(afterDialog, refMenu, overlay))
-                    .withMenuItem("Main menu", () -> quitToMainMenu(afterDialog, refMenu, overlay))
-                    .withMenuItem("Exit", () -> exitGame(refMenu, overlay))
-                    .build();
-        } else {
-            MusicService.getInstance().play("scores.mp3");
-            refMenu[0] = InGameMenuUI.builder()
-                    .withTitle("All levels cleared")
-                    .withMenuItem("Main menu", () -> quitToMainMenu(afterDialog, refMenu, overlay))
-                    .withMenuItem("Exit", () -> exitGame(refMenu, overlay))
-                    .build();
-        }
-        FXGL.getGameScene().addUINode(refMenu[0]);
-    }
-
-    private static void exitGame(StackPane[] refMenu, ShatteredOverlay overlay) {
-        FXGL.getGameScene().removeUINode(refMenu[0]);
-        overlay.dismiss();
-        ArkanoidApp.setEndStateMenuVisible(false);
-        FXGL.getGameController().exit();
-    }
-
-    private void quitToMainMenu(Runnable afterDialog, StackPane[] refMenu, ShatteredOverlay overlay) {
-        FXGL.getGameScene().removeUINode(refMenu[0]);
-        overlay.dismiss();
-        FXGL.getGameController().resumeEngine();
-        ArkanoidApp.setEndStateMenuVisible(false);
-        FXGL.getGameScene().getRoot().setCursor(Cursor.DEFAULT);
-        quitToMainMenuNoDialog();
-        if (afterDialog != null) afterDialog.run();
-    }
-
-    private void continueToNextLevel(Runnable afterDialog, StackPane[] refMenu, ShatteredOverlay overlay) {
-        FXGL.getGameScene().removeUINode(refMenu[0]);
-        overlay.dismiss();
-        int nextIndex = currentLevelIndex + 1;
-        if (levelOrder == null || levelOrder.isEmpty()) {
-            loadAndStart();
-        } else if (nextIndex >= levelOrder.size()) {
-            session.resetForNewGame();
-            currentLevelIndex = 0;
-            ArkanoidApp.setEndStateMenuVisible(false);
-            returnToMainMenu();
-            if (afterDialog != null) afterDialog.run();
-            return;
-        } else {
-            currentLevelIndex = nextIndex;
-            loadAndStart();
-        }
-        FXGL.getGameController().resumeEngine();
-        ArkanoidApp.setEndStateMenuVisible(false);
-        MouseUI.setMouseVisible(false);
-        if (afterDialog != null) afterDialog.run();
-    }
-
-    public void onGameOver(Runnable afterDialog) {
-        ShatteredOverlay overlay = ShatteredOverlay.showBackground();
-        cleanupLevelEntities();
-        MusicService.getInstance().stopCurrentMusic();
-        FXGL.getGameController().pauseEngine();
-        hudManager.hide();
-        MouseUI.setMouseVisible(true);
-        ArkanoidApp.setEndStateMenuVisible(true);
-
-        MusicService.getInstance().play("loser.mp3");
-        StackPane[] refMenu = new StackPane[1];
-        refMenu[0] = InGameMenuUI.builder()
-                .withTitle("Game over")
-                .withMenuItem("Main menu", () -> quitToMainMenu(afterDialog, refMenu, overlay))
-                .withMenuItem("Exit", () -> exitGame(refMenu, overlay))
-                .build();
-        FXGL.getGameScene().addUINode(refMenu[0]);
-    }
-
-    private void cleanupLevelEntities() {
-        FXGL.getGameWorld().getEntitiesByType(
-                EntityType.BALL, EntityType.SURPRISE, EntityType.BRICK, EntityType.WALL_SAFETY, EntityType.PADDLE
-        ).forEach(e -> {
-            if (e.isActive()) e.removeFromWorld();
-        });
-    }
-
-    private void loadAndStart() {
-        session.setCurrentLevel(currentLevelIndex + 1);
-        MouseUI.setMouseVisible(false);
-        String levelFileName = levelOrder.get(currentLevelIndex);
-        FXGL.getGameScene().clearUINodes();
-        try {
-            FXGL.getGameScene().getRoot().setBackground(null);
-            FXGL.getGameScene().setBackgroundColor(Color.web("#000000"));
-        } catch (Exception ignored) {
-        }
-        session.resetLevel();
-        LevelEntity level;
-        try {
-            level = levelLoader.loadLevel(levelFileName);
-        } catch (Exception ex) {
-            log.severe("Failed to load level: " + levelFileName + " : " + ex.getMessage());
-            throw new RuntimeException(ex);
-        }
-        currentLevel = level;
-        log.info("Loaded level: " + levelFileName + " (" + level.cols + "x" + level.rows + "), music=" + level.music + ", background=" + level.background);
-        applyLevelBackground(level);
-        new LevelBuilder(repository, session).buildBricks(level);
-        hudManager.initHUD();
-        hudManager.refresh(session);
-        wallsFactory.spawnWalls();
-        spawnPaddleAndBall();
-    }
-
-    private void applyLevelBackground(LevelEntity level) {
-        var root = FXGL.getGameScene().getRoot();
-        if (level == null || level.background == null || level.background.isBlank()) {
-            try {
-                root.setBackground(null);
-                FXGL.getGameScene().setBackgroundColor(Color.web("#000000"));
-            } catch (Exception ignored) {
-            }
-            return;
-        }
-        String name = level.background.trim();
-        String resource = name.startsWith("/") ? name : "/assets/textures/bg/" + name;
-        try {
-            var is = getClass().getResourceAsStream(resource);
-            if (is == null) {
-                log.warning("Background not found: " + resource);
-                try {
-                    root.setBackground(null);
-                    FXGL.getGameScene().setBackgroundColor(Color.web("#000000"));
-                } catch (Exception ignored) {
-                }
-                return;
-            }
-            Image img = new Image(is);
-            BackgroundSize size = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, true);
-            BackgroundImage bg = new BackgroundImage(img, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, size);
-            root.setBackground(new Background(bg));
-        } catch (Exception e) {
-            log.warning("Failed to apply background '" + resource + "': " + e.getMessage());
-            try {
-                root.setBackground(null);
-                FXGL.getGameScene().setBackgroundColor(Color.web("#000000"));
-            } catch (Exception ignored) {
-            }
-        }
-    }
-
-    private boolean hasNextLevel() {
-        return levelOrder != null && currentLevelIndex < levelOrder.size() - 1;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/core/GameEvent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/core/GameEvent.java b/src/main/java/org/overb/arkanoidfx/game/core/GameEvent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/core/GameEvent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,14 +0,0 @@
-package org.overb.arkanoidfx.game.core;
-
-import org.overb.arkanoidfx.enums.EventType;
-
-public record GameEvent(EventType type, Object payload) {
-
-    public static GameEvent of(EventType type) {
-        return new GameEvent(type, null);
-    }
-
-    public static GameEvent of(EventType type, Object payload) {
-        return new GameEvent(type, payload);
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/game/SurpriseService.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/SurpriseService.java b/src/main/java/org/overb/arkanoidfx/game/SurpriseService.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/SurpriseService.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,72 +0,0 @@
-package org.overb.arkanoidfx.game;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.entity.Entity;
-import javafx.geometry.Point2D;
-import org.overb.arkanoidfx.components.BallComponent;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.world.BallFactory;
-import org.overb.arkanoidfx.game.world.WallsFactory;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public final class SurpriseService {
-
-    private final BallFactory ballFactory;
-    private final WallsFactory wallsFactory;
-
-    public SurpriseService(BallFactory ballFactory, WallsFactory wallsFactory) {
-        this.ballFactory = ballFactory;
-        this.wallsFactory = wallsFactory;
-    }
-
-    public void applyMultiball() {
-        // Snapshot current balls to avoid chain-spawning from newly created balls within the same frame
-        List<Entity> balls = new ArrayList<>(FXGL.getGameWorld().getEntitiesByType(EntityType.BALL));
-        if (balls.isEmpty() || balls.size() >= 30) {
-            return;
-        }
-
-        // Resolve current paddle for new balls to attach logic/state
-        List<Entity> paddles = FXGL.getGameWorld().getEntitiesByType(EntityType.PADDLE);
-        Entity paddle = paddles.isEmpty() ? null : paddles.getFirst();
-        if (paddle == null) {
-            return;
-        }
-
-        double delta = Math.toRadians(10.0);
-
-        for (Entity ball : balls) {
-            var bc = ball.getComponentOptional(BallComponent.class).orElse(null);
-            if (bc == null) {
-                continue;
-            }
-            Point2D v = bc.getVelocity();
-            double speed = v.magnitude();
-            if (speed < 1e-3) {
-                continue;
-            }
-            Point2D dir = v.normalize();
-
-            spawnBallWithAngleOffset(ball, dir, speed, +delta, paddle);
-            spawnBallWithAngleOffset(ball, dir, speed, -delta, paddle);
-        }
-    }
-
-    private void spawnBallWithAngleOffset(Entity sourceBall, Point2D dir, double speed, double ang, Entity paddle) {
-        Point2D rotated = rotate(dir, ang).normalize().multiply(speed);
-        double x = sourceBall.getCenter().getX() - 8.0;
-        double y = sourceBall.getCenter().getY() - 8.0;
-        ballFactory.spawnLaunchedBallAt(x, y, rotated, paddle);
-    }
-
-    private Point2D rotate(Point2D v, double ang) {
-        double c = Math.cos(ang), s = Math.sin(ang);
-        return new Point2D(v.getX() * c - v.getY() * s, v.getX() * s + v.getY() * c);
-    }
-
-    public void applySafetyWall(double durationSec) {
-        wallsFactory.enableSafetyWall(durationSec);
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/entities/PaddleEntity.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/PaddleEntity.java b/src/main/java/org/overb/arkanoidfx/entities/PaddleEntity.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/PaddleEntity.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,12 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class PaddleEntity {
-    public int id;
-    public String name;
-    public int sizeW;
-    public int sizeH;
-    public Sprite visual;
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/world/PaddleFactory.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/world/PaddleFactory.java b/src/main/java/org/overb/arkanoidfx/game/world/PaddleFactory.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/world/PaddleFactory.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,81 +0,0 @@
-package org.overb.arkanoidfx.game.world;
-
-import com.almasb.fxgl.dsl.EntityBuilder;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.physics.BoundingShape;
-import com.almasb.fxgl.physics.HitBox;
-import com.almasb.fxgl.texture.Texture;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Rectangle;
-import org.overb.arkanoidfx.components.PaddleAnimComponent;
-import org.overb.arkanoidfx.components.PaddleComponent;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.entities.PaddleEntity;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
-public final class PaddleFactory {
-
-    private final EntityRepository repository;
-
-    public PaddleFactory(EntityRepository repository) {
-        this.repository = repository;
-    }
-
-    public Entity spawnPaddle(int levelIndex) {
-        List<Integer> paddleIds = new ArrayList<>(repository.getPaddles().keySet());
-        PaddleEntity paddleDefinition = repository.getPaddle(paddleIds.get(levelIndex % paddleIds.size()));
-
-        double paddleWidth = EntityType.PADDLE.getDesignWidth();
-        double paddleHeight = EntityType.PADDLE.getDesignHeight();
-        double y = ResolutionManager.DESIGN_RESOLUTION.getHeight() - 80;
-        double mouseX = com.almasb.fxgl.dsl.FXGL.getInput().getMousePositionWorld().getX();
-        double x = mouseX - paddleWidth / 2.0;
-        double minX = 0.0;
-        double maxX = ResolutionManager.DESIGN_RESOLUTION.getWidth() - paddleWidth;
-        if (x < minX) {
-            x = minX;
-        }
-        if (x > maxX) {
-            x = maxX;
-        }
-
-        Texture paddleTexture = null;
-        if (paddleDefinition != null && paddleDefinition.visual != null && paddleDefinition.visual.sprite != null) {
-            paddleTexture = org.overb.arkanoidfx.util.TextureUtils.loadTextureOrNull(
-                    paddleDefinition.visual.sprite,
-                    paddleWidth,
-                    paddleHeight,
-                    Math.max(1, paddleDefinition.visual.frameW),
-                    Math.max(1, paddleDefinition.visual.frameH)
-            );
-        }
-        EntityBuilder builder = new EntityBuilder()
-                .type(EntityType.PADDLE)
-                .at(x, y)
-                .view(Objects.requireNonNullElseGet(paddleTexture, () -> new Rectangle(paddleWidth, paddleHeight, Color.DARKSLATEBLUE)))
-                .bbox(new HitBox(BoundingShape.box(paddleWidth, paddleHeight)))
-                .with(new CollidableComponent(true))
-                .with(new PaddleComponent(paddleWidth, y));
-        Entity paddle = builder.buildAndAttach();
-        if (paddleTexture != null && paddleDefinition != null && paddleDefinition.visual != null) {
-            int frames = Math.max(1, paddleDefinition.visual.frames);
-            double frameDuration = paddleDefinition.visual.frameDuration > 0 ? paddleDefinition.visual.frameDuration : 0.0;
-            if (frames > 1 && frameDuration > 0) {
-                paddle.addComponent(new PaddleAnimComponent(
-                        paddleTexture,
-                        frames,
-                        Math.max(1, paddleDefinition.visual.frameW),
-                        Math.max(1, paddleDefinition.visual.frameH),
-                        frameDuration
-                ));
-            }
-        }
-        return paddle;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/ui/MainMenuUI.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/MainMenuUI.java b/src/main/java/org/overb/arkanoidfx/game/ui/MainMenuUI.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/MainMenuUI.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,107 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import javafx.geometry.Insets;
-import javafx.geometry.Pos;
-import javafx.scene.effect.DropShadow;
-import javafx.scene.effect.Glow;
-import javafx.scene.image.Image;
-import javafx.scene.layout.*;
-import javafx.scene.paint.Color;
-import javafx.scene.text.Font;
-import javafx.scene.text.FontWeight;
-import javafx.scene.text.Text;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-import java.util.Objects;
-import java.util.function.Consumer;
-
-public class MainMenuUI extends StackPane {
-
-    private final VBox menuBox = new VBox(16);
-
-    public enum Item { PLAY, EDITOR, OPTIONS, EXIT }
-
-    public MainMenuUI(Consumer<Item> onAction) {
-        applyBackground("/assets/textures/bg/black-red-square-rectangle-rq-2560x1440.jpg");
-        setPrefSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMaxSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMinSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        menuBox.setAlignment(Pos.CENTER);
-        getChildren().add(menuBox);
-
-        Text title = new Text("ArkanoidFX");
-        title.setFill(Color.WHITE);
-        title.setFont(Font.font("Verdana", FontWeight.BOLD, 60));
-        var titleWrapper = new StackPane(title);
-        titleWrapper.setPadding(new Insets(20, 20, 40, 20));
-        title.setEffect(new DropShadow(35, Color.DARKVIOLET));
-        menuBox.getChildren().add(titleWrapper);
-
-        addItem("Play", () -> onAction.accept(Item.PLAY));
-        addItem("Level Editor", () -> onAction.accept(Item.EDITOR));
-        addItem("Options", () -> onAction.accept(Item.OPTIONS));
-        addItem("Exit", () -> onAction.accept(Item.EXIT));
-
-        widthProperty().addListener((o, ov, nv) -> requestLayout());
-        heightProperty().addListener((o, ov, nv) -> requestLayout());
-        if (!menuBox.getChildren().isEmpty()) {
-            menuBox.getChildren().getFirst().requestFocus();
-        }
-    }
-
-    @Override
-    protected void layoutChildren() {
-        super.layoutChildren();
-        double w = ResolutionManager.DESIGN_RESOLUTION.getWidth();
-        double h = ResolutionManager.DESIGN_RESOLUTION.getHeight();
-        menuBox.applyCss();
-        double mw = Math.max(menuBox.prefWidth(-1), menuBox.getWidth());
-        double mh = Math.max(menuBox.prefHeight(-1), menuBox.getHeight());
-        double x = (w - mw) / 2.0;
-        double y = (h - mh) / 2.0;
-        if (Double.isNaN(x)) x = 0;
-        if (Double.isNaN(y)) y = 0;
-        layoutInArea(menuBox, x, y, mw, mh, -1, Pos.CENTER.getHpos(), Pos.CENTER.getVpos());
-    }
-
-    private void addItem(String label, Runnable action) {
-        Text text = new Text(label);
-        text.setFill(Color.WHITE);
-        text.setFont(Font.font("Cambria", 48));
-        applyHoverEffects(text);
-        text.setOnMouseClicked(e -> action.run());
-        menuBox.getChildren().add(text);
-        text.setFocusTraversable(true);
-    }
-
-    private void applyHoverEffects(Text text) {
-        Glow glow = new Glow(0.0);
-        DropShadow shadow = new DropShadow(24, Color.AQUA);
-        shadow.setSpread(0.4);
-        text.setEffect(glow);
-
-        text.setOnMouseEntered(e -> {
-            glow.setLevel(0.8);
-            text.setScaleX(1.1);
-            text.setScaleY(1.1);
-            text.setEffect(shadow);
-        });
-        text.setOnMouseExited(e -> {
-            glow.setLevel(0.0);
-            text.setScaleX(1.0);
-            text.setScaleY(1.0);
-            text.setEffect(null);
-        });
-    }
-
-    private void applyBackground(String resource) {
-        try {
-            Image img = new Image(Objects.requireNonNull(getClass().getResourceAsStream(resource)));
-            BackgroundSize size = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, true);
-            BackgroundImage bg = new BackgroundImage(img, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, size);
-            setBackground(new Background(bg));
-        } catch (Exception e) {
-            setStyle("-fx-background-color: black;");
-        }
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/game/core/EventBus.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/core/EventBus.java b/src/main/java/org/overb/arkanoidfx/game/core/EventBus.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/core/EventBus.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,47 +0,0 @@
-package org.overb.arkanoidfx.game.core;
-
-import org.overb.arkanoidfx.enums.EventType;
-
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.function.Consumer;
-
-public final class EventBus {
-
-    private static final EnumMap<EventType, List<Consumer<GameEvent>>> listeners = new EnumMap<>(EventType.class);
-
-    private EventBus() {
-    }
-
-    public static synchronized void subscribe(EventType type, Consumer<GameEvent> listener) {
-        listeners.computeIfAbsent(type, k -> new ArrayList<>()).add(listener);
-    }
-
-    public static synchronized void unsubscribe(EventType type, Consumer<GameEvent> listener) {
-        List<Consumer<GameEvent>> list = listeners.get(type);
-        if (list != null) {
-            list.remove(listener);
-            if (list.isEmpty()) {
-                listeners.remove(type);
-            }
-        }
-    }
-
-    public static void publish(GameEvent event) {
-        List<Consumer<GameEvent>> snapshot;
-        synchronized (EventBus.class) {
-            List<Consumer<GameEvent>> list = listeners.get(event.type());
-            if (list == null || list.isEmpty()) {
-                return;
-            }
-            snapshot = new ArrayList<>(list);
-        }
-        for (Consumer<GameEvent> c : snapshot) {
-            try {
-                c.accept(event);
-            } catch (Exception ignore) {
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/text/surprises.json
===================================================================
diff --git a/src/main/resources/assets/text/surprises.json b/src/main/resources/assets/text/surprises.json
deleted file mode 100644
--- a/src/main/resources/assets/text/surprises.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,55 +0,0 @@
-{
-  "surprises": [
-    {
-      "id": 1,
-      "name": "multiball",
-      "visual": {
-        "sprite": "surprise_multiball.png",
-        "frames": 24,
-        "frameW": 59,
-        "frameH": 59,
-        "frameDuration": 0.042
-      },
-      "fallSpeed": 160,
-      "effect": "MULTIBALL",
-      "params": {
-        "count": 3
-      },
-      "spawnChance": 0.1,
-      "sound": "surprise_pickup.wav"
-    },
-    {
-      "id": 2,
-      "name": "safety_wall",
-      "visual": {
-        "sprite": "surprise_shield.png",
-        "frames": 24,
-        "frameW": 59,
-        "frameH": 59,
-        "frameDuration": 0.042
-      },
-      "fallSpeed": 140,
-      "effect": "SAFETY_WALL",
-      "params": {
-        "durationSec": 10
-      },
-      "spawnChance": 0.1,
-      "sound": "surprise_pickup.wav"
-    },
-    {
-      "id": 3,
-      "name": "bonus_life",
-      "visual": {
-        "sprite": "surprise_life.png",
-        "frames": 24,
-        "frameW": 59,
-        "frameH": 59,
-        "frameDuration": 0.08
-      },
-      "fallSpeed": 140,
-      "effect": "BONUS_LIFE",
-      "spawnChance": 0.042,
-      "sound": "bonus_life.wav"
-    }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/entities/LevelEntity.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/LevelEntity.java b/src/main/java/org/overb/arkanoidfx/entities/LevelEntity.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/LevelEntity.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,22 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-import java.util.ArrayList;
-import java.util.List;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public final class LevelEntity {
-    public int cols;
-    public int rows;
-    public String music;
-    public String background;
-    public List<Cell> cells = new ArrayList<>();
-
-    @JsonIgnoreProperties(ignoreUnknown = true)
-    public static final class Cell {
-        public int col;
-        public int row;
-        public int brickId;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/GameSession.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/GameSession.java b/src/main/java/org/overb/arkanoidfx/game/GameSession.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/GameSession.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,72 +0,0 @@
-package org.overb.arkanoidfx.game;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-public final class GameSession {
-
-    private double score = 0;
-    private int combo = 0;
-    private int lives = 3;
-    private int destructibleBricksLeft = 0;
-    private int lastGain = 0;
-    @Setter
-    private int currentLevel = 0;
-    private double lastMultiplier = 1.0;
-
-    private static double comboSpeedMultiplier(int comboCount, double sNorm) {
-        double comboFactor = 0.15 * Math.sqrt(Math.max(0, comboCount));
-        double speedFactor = 0.75 * Math.max(0.0, sNorm - 1.0);
-        double total = 1.0 + comboFactor + speedFactor;
-        return Math.max(1.0, Math.min(5.0, total));
-    }
-
-    public void onBrickDestroyed(int basePoints, double maxBallSpeed, double baseBallSpeed) {
-        combo++;
-        destructibleBricksLeft = Math.max(0, destructibleBricksLeft - 1);
-        double sNorm = (baseBallSpeed > 1e-6) ? (maxBallSpeed / baseBallSpeed) : 1.0;
-        lastMultiplier = comboSpeedMultiplier(combo, sNorm);
-        double gain = basePoints * lastMultiplier;
-        lastGain = (int) Math.round(gain);
-        score += gain;
-    }
-
-    public void resetCombo() {
-        combo = 0;
-        lastMultiplier = 1.0;
-        lastGain = 0;
-    }
-
-    public void loseLife() {
-        lives = Math.max(0, lives - 1);
-        resetCombo();
-    }
-
-    public void registerDestructibleBrick() {
-        destructibleBricksLeft++;
-    }
-
-    public void resetForNewGame() {
-        score = 0;
-        lives = 3;
-        resetLevel();
-    }
-
-    public void resetLevel() {
-        resetCombo();
-        destructibleBricksLeft = 0;
-    }
-
-    public boolean areSurprisesEnabled() {
-        return destructibleBricksLeft >= 3;
-    }
-
-    public int getScoreRounded() {
-        return (int) Math.round(score);
-    }
-
-    public void addLife() {
-        lives++;
-    }
-}
Index: .gitignore
===================================================================
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
--- a/.gitignore	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,40 +0,0 @@
-### IntelliJ IDEA ###
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-.kotlin
-
-# Thêm quy tắc loại trừ chính
-.idea/ 
-*.iml
-
-### Eclipse ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
-
-### Mac OS ###
-.DS_Store
-
-# CÁC THƯ MỤC BUILD PHỔ BIẾN KHÁC (RẤT QUAN TRỌNG)
-# Thư mục build của Maven
-/target/ 
-# Thư mục build của Gradle (nếu dùng Gradle)
-/build/
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/components/DebugHitboxViewComponent.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/components/DebugHitboxViewComponent.java b/src/main/java/org/overb/arkanoidfx/components/DebugHitboxViewComponent.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/components/DebugHitboxViewComponent.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,30 +0,0 @@
-package org.overb.arkanoidfx.components;
-
-import com.almasb.fxgl.entity.component.Component;
-import javafx.scene.Node;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Rectangle;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class DebugHitboxViewComponent extends Component {
-
-    private final List<Node> overlays = new ArrayList<>();
-
-    @Override
-    public void onAdded() {
-        Rectangle outline = new Rectangle(entity.getWidth(), entity.getHeight());
-        outline.setFill(Color.color(0, 0, 0, 0));
-        outline.setStroke(Color.LIMEGREEN);
-        outline.setStrokeWidth(1.0);
-        entity.getViewComponent().addChild(outline);
-        overlays.add(outline);
-    }
-
-    @Override
-    public void onRemoved() {
-        overlays.forEach(node -> entity.getViewComponent().removeChild(node));
-        overlays.clear();
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/entities/EntityRepository.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/EntityRepository.java b/src/main/java/org/overb/arkanoidfx/entities/EntityRepository.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/EntityRepository.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,27 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-public class EntityRepository {
-    private final Map<Integer, BrickEntity> bricksById = new HashMap<>();
-    private final Map<Integer, SurpriseEntity> surprisesById = new HashMap<>();
-    private final Map<Integer, BallEntity> ballsById = new HashMap<>();
-    private final Map<Integer, PaddleEntity> paddlesById = new HashMap<>();
-
-    public void addBrick(BrickEntity def) { bricksById.put(def.id, def); }
-    public void addSurprise(SurpriseEntity def) { surprisesById.put(def.id, def); }
-    public void addBall(BallEntity def) { ballsById.put(def.id, def); }
-    public void addPaddle(PaddleEntity def) { paddlesById.put(def.id, def); }
-
-    public Map<Integer, BrickEntity> getBricks() { return Collections.unmodifiableMap(bricksById); }
-    public Map<Integer, SurpriseEntity> getSurprises() { return Collections.unmodifiableMap(surprisesById); }
-    public Map<Integer, BallEntity> getBalls() { return Collections.unmodifiableMap(ballsById); }
-    public Map<Integer, PaddleEntity> getPaddles() { return Collections.unmodifiableMap(paddlesById); }
-
-    public BrickEntity getBrick(int id) { return bricksById.get(id); }
-    public SurpriseEntity getSurprise(int id) { return surprisesById.get(id); }
-    public BallEntity getBall(int id) { return ballsById.get(id); }
-    public PaddleEntity getPaddle(int id) { return paddlesById.get(id); }
-}
Index: src/main/java/org/overb/arkanoidfx/entities/SurpriseEntity.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/SurpriseEntity.java b/src/main/java/org/overb/arkanoidfx/entities/SurpriseEntity.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/SurpriseEntity.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,14 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class SurpriseEntity {
-    public int id;
-    public String name;
-    public Sprite visual;
-    public double fallSpeed;
-    public String effect;
-    public String sound;
-    public double spawnChance;
-}
\ No newline at end of file
Index: src/main/resources/assets/text/balls.json
===================================================================
diff --git a/src/main/resources/assets/text/balls.json b/src/main/resources/assets/text/balls.json
deleted file mode 100644
--- a/src/main/resources/assets/text/balls.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,23 +0,0 @@
-{
-  "balls": [
-    {
-      "id": 1,
-      "name": "default",
-      "sizeW": 20,
-      "sizeH": 20,
-      "visual": {
-        "sprite": "ball_default.png",
-        "frames": 24,
-        "frameW": 129,
-        "frameH": 129,
-        "frameDuration": 0.042
-      },
-      "sounds": {
-        "hitWall": "ball_wall.wav",
-        "hitPaddle": "ball_paddle.wav",
-        "lost": "oof.wav",
-        "hitLightning": "ball_lightning.wav"
-      }
-    }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/enums/Axis.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/enums/Axis.java b/src/main/java/org/overb/arkanoidfx/enums/Axis.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/enums/Axis.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,6 +0,0 @@
-package org.overb.arkanoidfx.enums;
-
-public enum Axis {
-    HORIZONTAL,
-    VERTICAL
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/ui/InGameMenuUI.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/InGameMenuUI.java b/src/main/java/org/overb/arkanoidfx/game/ui/InGameMenuUI.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/InGameMenuUI.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,128 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import javafx.geometry.Insets;
-import javafx.geometry.Pos;
-import javafx.scene.effect.DropShadow;
-import javafx.scene.effect.Glow;
-import javafx.scene.layout.StackPane;
-import javafx.scene.layout.VBox;
-import javafx.scene.paint.Color;
-import javafx.scene.text.Font;
-import javafx.scene.text.FontWeight;
-import javafx.scene.text.Text;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class InGameMenuUI extends StackPane {
-
-    private final VBox menuBox = new VBox(16);
-    private final StackPane menuContainer = new StackPane();
-
-    private InGameMenuUI(String title, List<MenuItem> items) {
-        setStyle("-fx-background-color: transparent;");
-        setPrefSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMaxSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        setMinSize(ResolutionManager.DESIGN_RESOLUTION.getWidth(), ResolutionManager.DESIGN_RESOLUTION.getHeight());
-        menuBox.setAlignment(Pos.CENTER);
-        menuContainer.getChildren().add(menuBox);
-        menuContainer.setStyle("-fx-border-color: rgba(0,0,0,0.1); -fx-border-width: 1; -fx-border-radius: 6; -fx-background-color: rgba(0,0,0,0.1); -fx-background-radius: 6;");
-        getChildren().add(menuContainer);
-        if (title != null && !title.isEmpty()) {
-            Text titleNode = new Text(title);
-            titleNode.setFill(Color.WHITE);
-            titleNode.setFont(Font.font("Verdana", FontWeight.BOLD, 50));
-            titleNode.setEffect(new DropShadow(24, Color.DARKGRAY));
-            var titleWrapper = new StackPane(titleNode);
-            titleWrapper.setPadding(new Insets(10, 10, 30, 10));
-            menuBox.getChildren().add(titleWrapper);
-        }
-        for (MenuItem mi : items) {
-            addItem(mi.label, mi.action);
-        }
-        widthProperty().addListener((o, ov, nv) -> requestLayout());
-        heightProperty().addListener((o, ov, nv) -> requestLayout());
-        if (!menuBox.getChildren().isEmpty()) {
-            int index = (title != null && !title.isEmpty()) ? 1 : 0;
-            if (index < menuBox.getChildren().size()) {
-                menuBox.getChildren().get(index).requestFocus();
-            }
-        }
-    }
-
-    @Override
-    protected void layoutChildren() {
-        super.layoutChildren();
-        double w = ResolutionManager.DESIGN_RESOLUTION.getWidth();
-        double h = ResolutionManager.DESIGN_RESOLUTION.getHeight();
-        menuBox.applyCss();
-        double mw = Math.max(menuBox.prefWidth(-1), menuBox.getWidth());
-        double mh = Math.max(menuBox.prefHeight(-1), menuBox.getHeight());
-        double pad = 16;
-        double cw = mw + pad * 2;
-        double ch = mh + pad * 2;
-        menuContainer.setPadding(new Insets(pad));
-        double x = (w - cw) / 2.0;
-        double y = (h - ch) / 2.0;
-        if (Double.isNaN(x)) x = 0;
-        if (Double.isNaN(y)) y = 0;
-        layoutInArea(menuContainer, x, y, cw, ch, -1, Pos.CENTER.getHpos(), Pos.CENTER.getVpos());
-    }
-
-    private void addItem(String label, Runnable action) {
-        Text text = new Text(label);
-        text.setFill(Color.WHITE);
-        text.setFont(Font.font("Cambria", 42));
-        applyHoverEffects(text);
-        text.setOnMouseClicked(e -> action.run());
-        menuBox.getChildren().add(text);
-        text.setFocusTraversable(true);
-    }
-
-    private void applyHoverEffects(Text text) {
-        Glow glow = new Glow(0.0);
-        DropShadow shadow = new DropShadow(20, Color.AQUA);
-        shadow.setSpread(0.35);
-        text.setEffect(glow);
-        text.setOnMouseEntered(e -> {
-            glow.setLevel(0.8);
-            text.setScaleX(1.08);
-            text.setScaleY(1.08);
-            text.setEffect(shadow);
-        });
-        text.setOnMouseExited(e -> {
-            glow.setLevel(0.0);
-            text.setScaleX(1.0);
-            text.setScaleY(1.0);
-            text.setEffect(null);
-        });
-    }
-
-    public static Builder builder() {
-        return new Builder();
-    }
-
-    private record MenuItem(String label, Runnable action) {}
-
-    public static class Builder {
-        private String title = "";
-        private final List<MenuItem> items = new ArrayList<>();
-
-        public Builder withTitle(String title) {
-            this.title = title == null ? "" : title;
-            return this;
-        }
-
-        public Builder withMenuItem(String text, Runnable action) {
-            if (text == null || text.isBlank()) return this;
-            if (action == null) action = () -> {};
-            items.add(new MenuItem(text, action));
-            return this;
-        }
-
-        public InGameMenuUI build() {
-            return new InGameMenuUI(title, items);
-        }
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/game/ui/MouseUI.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/MouseUI.java b/src/main/java/org/overb/arkanoidfx/game/ui/MouseUI.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/MouseUI.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,100 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.time.TimerAction;
-import javafx.event.EventHandler;
-import javafx.geometry.Point2D;
-import javafx.scene.Cursor;
-import javafx.scene.input.MouseEvent;
-import javafx.scene.robot.Robot;
-import javafx.util.Duration;
-
-import java.util.function.Consumer;
-
-public final class MouseUI {
-
-    private static EventHandler<MouseEvent> confineHandlerMoved;
-    private static EventHandler<MouseEvent> confineHandlerDragged;
-    private static TimerAction mouseConfinePollTask;
-    private static Robot mouseRobot;
-    private static boolean mouseWarping = false;
-
-    private MouseUI() {}
-
-    public static void setMouseVisible(boolean visible) {
-        if (!visible) {
-            FXGL.getGameScene().getRoot().setCursor(Cursor.NONE);
-        } else {
-            FXGL.getGameScene().getRoot().setCursor(Cursor.DEFAULT);
-        }
-        setMouseConstrained(!visible);
-    }
-
-    private static void setMouseConstrained(boolean constrained) {
-        var root = FXGL.getGameScene().getRoot();
-        var scene = root.getScene();
-        Runnable apply = () -> {
-            var sc = root.getScene();
-            if (sc == null) return;
-            if (confineHandlerMoved != null) {
-                sc.removeEventFilter(MouseEvent.MOUSE_MOVED, confineHandlerMoved);
-                confineHandlerMoved = null;
-            }
-            if (confineHandlerDragged != null) {
-                sc.removeEventFilter(MouseEvent.MOUSE_DRAGGED, confineHandlerDragged);
-                confineHandlerDragged = null;
-            }
-            if (mouseConfinePollTask != null) {
-                mouseConfinePollTask.expire();
-                mouseConfinePollTask = null;
-            }
-            sc.setOnMouseExited(null);
-            if (!constrained) {
-                return;
-            }
-            if (mouseRobot == null) {
-                mouseRobot = new javafx.scene.robot.Robot();
-            }
-            Consumer<Point2D> confineByScreenPoint = screenPt -> {
-                if (mouseWarping) return;
-                var screenBounds = root.localToScreen(root.getBoundsInLocal());
-                if (screenBounds == null) return;
-                double sx = screenPt.getX();
-                double sy = screenPt.getY();
-                double minX = Math.ceil(screenBounds.getMinX()) + 1;
-                double minY = Math.ceil(screenBounds.getMinY()) + 1;
-                double maxX = Math.floor(screenBounds.getMaxX()) - 1;
-                double maxY = Math.floor(screenBounds.getMaxY()) - 1;
-                double clampedX = Math.min(Math.max(sx, minX), maxX);
-                double clampedY = Math.min(Math.max(sy, minY), maxY);
-                if (clampedX != sx || clampedY != sy) {
-                    mouseWarping = true;
-                    try {
-                        mouseRobot.mouseMove(clampedX, clampedY);
-                    } finally {
-                        FXGL.runOnce(() -> mouseWarping = false, Duration.millis(0.5));
-                    }
-                }
-            };
-            Consumer<MouseEvent> confineOnEvent = evt -> {
-                if (mouseWarping) return;
-                confineByScreenPoint.accept(new Point2D(evt.getScreenX(), evt.getScreenY()));
-                if (mouseWarping) evt.consume();
-            };
-            confineHandlerMoved = confineOnEvent::accept;
-            confineHandlerDragged = confineOnEvent::accept;
-            sc.addEventFilter(MouseEvent.MOUSE_MOVED, confineHandlerMoved);
-            sc.addEventFilter(MouseEvent.MOUSE_DRAGGED, confineHandlerDragged);
-            mouseConfinePollTask = FXGL.getGameTimer().runAtInterval(() -> {
-                if (mouseWarping) return;
-                var pos = new Point2D(mouseRobot.getMouseX(), mouseRobot.getMouseY());
-                confineByScreenPoint.accept(pos);
-            }, Duration.millis(16));
-        };
-        if (scene == null) {
-            FXGL.runOnce(apply, Duration.millis(1));
-        } else {
-            apply.run();
-        }
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/util/TextureUtils.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/util/TextureUtils.java b/src/main/java/org/overb/arkanoidfx/util/TextureUtils.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/util/TextureUtils.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,40 +0,0 @@
-package org.overb.arkanoidfx.util;
-
-import com.almasb.fxgl.dsl.FXGL;
-import com.almasb.fxgl.texture.Texture;
-import javafx.geometry.Rectangle2D;
-
-public final class TextureUtils {
-
-    private TextureUtils() {
-    }
-
-    public static Texture loadTextureOrNull(String spritePath, double targetWidth, double targetHeight, int frameW, int frameH) {
-        if (spritePath == null || spritePath.isBlank()) {
-            return null;
-        }
-        try {
-            Texture tex = FXGL.texture(spritePath);
-            tex.setFitWidth(targetWidth);
-            tex.setFitHeight(targetHeight);
-            tex.setPreserveRatio(false);
-            tex.setSmooth(false);
-            int fw = Math.max(1, frameW);
-            int fh = Math.max(1, frameH);
-            tex.setViewport(new Rectangle2D(0, 0, fw, fh));
-            tex.setTranslateX(0);
-            tex.setTranslateY(0);
-            return tex;
-        } catch (Exception ignore) {
-            return null;
-        }
-    }
-
-    public static void setViewportFrame(Texture texture, int frameIndex, int frameW, int frameH) {
-        if (texture == null) return;
-        int fw = Math.max(1, frameW);
-        int fh = Math.max(1, frameH);
-        double x = (double) Math.max(0, frameIndex) * fw;
-        texture.setViewport(new Rectangle2D(x, 0, fw, fh));
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/audio/MusicService.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/audio/MusicService.java b/src/main/java/org/overb/arkanoidfx/audio/MusicService.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/audio/MusicService.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,26 +0,0 @@
-package org.overb.arkanoidfx.audio;
-
-import lombok.Getter;
-import lombok.extern.java.Log;
-
-@Log
-public final class MusicService {
-
-    private static final MusicService INSTANCE = new MusicService();
-
-    public static MusicService getInstance() {
-        return INSTANCE;
-    }
-
-    public void play(String song) {
-        if (song == null || song.isBlank()) {
-            return;
-        }
-        stopCurrentMusic();
-        MusicBus.getInstance().loop(song);
-    }
-
-    public void stopCurrentMusic() {
-        MusicBus.getInstance().stop();
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/loaders/LevelLoader.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/loaders/LevelLoader.java b/src/main/java/org/overb/arkanoidfx/game/loaders/LevelLoader.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/loaders/LevelLoader.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,57 +0,0 @@
-package org.overb.arkanoidfx.game.loaders;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import org.overb.arkanoidfx.entities.LevelEntity;
-
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.List;
-
-public class LevelLoader {
-
-    private final String baseDir;
-    private final ObjectMapper mapper;
-
-    public LevelLoader() {
-        this("assets/levels/", new ObjectMapper());
-    }
-
-    public LevelLoader(String baseDir, ObjectMapper mapper) {
-        this.baseDir = baseDir.endsWith("/") ? baseDir : baseDir + "/";
-        this.mapper = mapper;
-    }
-
-    public List<String> loadLevelOrder() throws Exception {
-        var url = Thread.currentThread().getContextClassLoader()
-                .getResource(baseDir + "levels.txt");
-        if (url == null) {
-            throw new IllegalStateException(baseDir + "levels.txt not found");
-        }
-        List<String> result = new ArrayList<>();
-        try (var reader = new BufferedReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String trimmed = line.trim();
-                if (trimmed.isEmpty() || trimmed.startsWith("#")) continue;
-                result.add(trimmed);
-            }
-        }
-        return result;
-    }
-
-    public LevelEntity loadLevel(String levelFileName) throws Exception {
-        String resourcePath = baseDir + levelFileName;
-        try (InputStream is = Thread.currentThread()
-                .getContextClassLoader()
-                .getResourceAsStream(resourcePath)) {
-            if (is == null) {
-                throw new IllegalStateException("Level not found on classpath: " + resourcePath);
-            }
-            String json = new String(is.readAllBytes(), StandardCharsets.UTF_8);
-            return mapper.readValue(json, LevelEntity.class);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/entities/Sprite.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/Sprite.java b/src/main/java/org/overb/arkanoidfx/entities/Sprite.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/Sprite.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,12 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class Sprite {
-    public String sprite;
-    public int frames;
-    public int frameW;
-    public int frameH;
-    public double frameDuration;
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/ui/ShatteredOverlay.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/ui/ShatteredOverlay.java b/src/main/java/org/overb/arkanoidfx/game/ui/ShatteredOverlay.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/ui/ShatteredOverlay.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,337 +0,0 @@
-package org.overb.arkanoidfx.game.ui;
-
-import com.almasb.fxgl.dsl.FXGL;
-import javafx.animation.*;
-import javafx.geometry.Point2D;
-import javafx.scene.CacheHint;
-import javafx.scene.Group;
-import javafx.scene.Node;
-import javafx.scene.SnapshotParameters;
-import javafx.scene.effect.BlendMode;
-import javafx.scene.effect.DropShadow;
-import javafx.scene.effect.GaussianBlur;
-import javafx.scene.image.Image;
-import javafx.scene.image.ImageView;
-import javafx.scene.image.WritableImage;
-import javafx.scene.layout.*;
-import javafx.scene.paint.Color;
-import javafx.scene.paint.CycleMethod;
-import javafx.scene.paint.LinearGradient;
-import javafx.scene.paint.Stop;
-import javafx.scene.shape.Polygon;
-import javafx.scene.shape.Rectangle;
-import javafx.util.Duration;
-import lombok.extern.java.Log;
-import org.overb.arkanoidfx.game.ResolutionManager;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
-@Log
-public class ShatteredOverlay extends StackPane {
-
-    private final Group fragmentsLayer = new Group();
-
-    private ShatteredOverlay(Image snapshot, List<Poly> polys) {
-        setPickOnBounds(true);
-        setBackground(new Background(new BackgroundFill(Color.color(0, 0, 0, 0.0), null, null)));
-        var frags = new ArrayList<Node>();
-        for (Poly p : polys) {
-            frags.add(createFragment(snapshot, p));
-        }
-        fragmentsLayer.getChildren().addAll(frags);
-        fragmentsLayer.setMouseTransparent(true);
-        fragmentsLayer.setCache(true);
-        fragmentsLayer.setCacheHint(CacheHint.SPEED);
-
-        Region dim = new Region();
-        dim.setBackground(new Background(new BackgroundFill(Color.color(0, 0, 0, 0.25), null, null)));
-        dim.setMouseTransparent(true);
-        dim.prefWidthProperty().bind(widthProperty());
-        dim.prefHeightProperty().bind(heightProperty());
-
-        getChildren().addAll(fragmentsLayer, dim);
-        startGentleMotion(frags);
-        setOpacity(0);
-        FadeTransition ft = new FadeTransition(Duration.millis(250), this);
-        ft.setToValue(1);
-        ft.play();
-    }
-
-    private Node createFragment(Image snapshot, Poly poly) {
-        ImageView iv = new ImageView(snapshot);
-        Polygon clip = new Polygon();
-        for (int i = 0; i < poly.size(); i++) {
-            clip.getPoints().addAll(poly.xs[i], poly.ys[i]);
-        }
-        iv.setClip(clip);
-
-        Polygon border = new Polygon();
-        border.getPoints().setAll(clip.getPoints());
-        border.setFill(Color.TRANSPARENT);
-        border.setStroke(Color.color(1, 1, 1, 0.15));
-        border.setStrokeWidth(1.0);
-
-        Polygon gradShape = new Polygon();
-        gradShape.getPoints().setAll(clip.getPoints());
-
-        LinearGradient lg = new LinearGradient(
-                0, 0, 1, 1, true, CycleMethod.NO_CYCLE,
-                new Stop(0.0, Color.color(1, 1, 1, 0.08)),
-                new Stop(0.35, Color.color(1, 1, 1, 0.02)),
-                new Stop(0.65, Color.color(0, 0, 0, 0.03)),
-                new Stop(1.0, Color.color(0, 0, 0, 0.10))
-        );
-        gradShape.setFill(lg);
-        gradShape.setMouseTransparent(true);
-        gradShape.setBlendMode(BlendMode.SOFT_LIGHT);
-
-        Group g = new Group(iv, gradShape, border);
-        DropShadow ds = new DropShadow(6, Color.color(1, 1, 1, 0.25));
-        ds.setSpread(0.06);
-        g.setEffect(ds);
-        g.setCache(true);
-        g.setCacheHint(CacheHint.SPEED);
-        g.setMouseTransparent(true);
-        return g;
-    }
-
-    private void startGentleMotion(List<Node> frags) {
-        Random rnd = new Random();
-        for (Node n : frags) {
-            double tx = 2 + rnd.nextDouble() * 6;
-            double ty = 2 + rnd.nextDouble() * 6;
-            double sx = 0.985 + rnd.nextDouble() * 0.03;
-            double sy = 0.985 + rnd.nextDouble() * 0.03;
-            double rot = (rnd.nextDouble() * 2 - 1) * 2.0;
-            double period = 2.0 + rnd.nextDouble() * 1.5;
-
-            TranslateTransition tt = new TranslateTransition(Duration.seconds(period), n);
-            tt.setFromX(-tx);
-            tt.setToX(tx);
-            tt.setFromY(-ty);
-            tt.setToY(ty);
-            tt.setAutoReverse(true);
-            tt.setCycleCount(Animation.INDEFINITE);
-
-            ScaleTransition st = new ScaleTransition(Duration.seconds(period * 0.9), n);
-            st.setFromX(sx);
-            st.setToX(1.0 / sx);
-            st.setFromY(sy);
-            st.setToY(1.0 / sy);
-            st.setAutoReverse(true);
-            st.setCycleCount(Animation.INDEFINITE);
-
-            RotateTransition rt = new RotateTransition(Duration.seconds(period * 1.3), n);
-            rt.setFromAngle(-rot);
-            rt.setToAngle(rot);
-            rt.setAutoReverse(true);
-            rt.setCycleCount(Animation.INDEFINITE);
-
-            Duration delay = Duration.seconds(rnd.nextDouble() * 1.2);
-            tt.setDelay(delay);
-            st.setDelay(delay);
-            rt.setDelay(delay);
-
-            tt.play();
-            st.play();
-            rt.play();
-        }
-    }
-
-    public static ShatteredOverlay showBackground() {
-        WritableImage snap = takeSnapshot();
-        double w = snap.getWidth();
-        double h = snap.getHeight();
-        log.info(String.format("Snapshot size: %d x %d", (int) w, (int) h));
-
-        ImageView iv = new ImageView(snap);
-        iv.setEffect(new GaussianBlur(6));
-        double overscan = 1.02;
-        iv.setScaleX(overscan);
-        iv.setScaleY(overscan);
-        iv.setPreserveRatio(false);
-        Group g = new Group(iv);
-        g.setClip(new Rectangle(w, h));
-        var params = new javafx.scene.SnapshotParameters();
-        params.setFill(Color.BLACK);
-        WritableImage blurred = g.snapshot(params, new WritableImage((int) w, (int) h));
-        BackgroundSize size = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, true);
-        BackgroundImage bg = new BackgroundImage(blurred, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, size);
-        FXGL.getGameScene().getRoot().setBackground(new Background(bg));
-
-        Point2D impact = new Point2D(w * 0.5, h * 0.5);
-        List<Poly> polys = generateRadialSlices(w, h, impact);
-        if (polys.isEmpty()) {
-            polys = generateImpactBiasedFragments(w, h, impact);
-        }
-        ShatteredOverlay overlay = new ShatteredOverlay(snap, polys);
-        FXGL.getGameScene().addUINode(overlay);
-        overlay.setMinSize(w, h);
-        overlay.setPrefSize(w, h);
-        overlay.setMaxSize(w, h);
-        return overlay;
-    }
-
-    public void dismiss() {
-        FadeTransition ft = new FadeTransition(Duration.millis(200), this);
-        ft.setToValue(0);
-        ft.setOnFinished(e -> FXGL.getGameScene().removeUINode(this));
-        ft.play();
-    }
-
-    private static WritableImage takeSnapshot() {
-        var root = FXGL.getGameScene().getRoot();
-        var params = new SnapshotParameters();
-        params.setFill(Color.TRANSPARENT);
-        return root.snapshot(params, null);
-    }
-
-    private record Poly(double[] xs, double[] ys) {
-        int size() {
-            return xs.length;
-        }
-    }
-
-    private static List<Poly> generateImpactBiasedFragments(double w, double h, Point2D impact) {
-        int baseCols = 8, baseRows = 6;
-        double maxJitter = 24;
-        Random rnd = new Random();
-        List<Poly> out = new ArrayList<>();
-        double cx = impact.getX();
-        double cy = impact.getY();
-        double maxDist = Math.hypot(Math.max(cx, w - cx), Math.max(cy, h - cy));
-        for (int r = 0; r < baseRows; r++) {
-            for (int c = 0; c < baseCols; c++) {
-                double x0 = (c * w) / baseCols;
-                double y0 = (r * h) / baseRows;
-                double x1 = ((c + 1) * w) / baseCols;
-                double y1 = ((r + 1) * h) / baseRows;
-                double cellCx = (x0 + x1) * 0.5;
-                double cellCy = (y0 + y1) * 0.5;
-                double d = Math.hypot(cellCx - cx, cellCy - cy);
-                double t = Math.min(1.0, d / (maxDist * 0.9));
-                int sub = (t < 0.25) ? 3 : (t < 0.6 ? 2 : 1);
-                double jitter = maxJitter * (0.4 + 0.6 * t);
-                Point2D[][] pts = new Point2D[sub + 1][sub + 1];
-                for (int sr = 0; sr <= sub; sr++) {
-                    for (int sc = 0; sc <= sub; sc++) {
-                        double x = x0 + (x1 - x0) * (sc / (double) sub);
-                        double y = y0 + (y1 - y0) * (sr / (double) sub);
-                        boolean border = (sr == 0 || sr == sub || sc == 0 || sc == sub);
-                        double jx = border ? 0 : (rnd.nextDouble() * 2 - 1) * jitter;
-                        double jy = border ? 0 : (rnd.nextDouble() * 2 - 1) * jitter;
-                        pts[sr][sc] = new Point2D(x + jx, y + jy);
-                    }
-                }
-                for (int sr = 0; sr < sub; sr++) {
-                    for (int sc = 0; sc < sub; sc++) {
-                        Point2D p00 = pts[sr][sc], p10 = pts[sr][sc + 1], p01 = pts[sr + 1][sc], p11 = pts[sr + 1][sc + 1];
-                        boolean diag = ((sr + sc) % 2 == 0);
-                        if (diag) {
-                            out.add(polyOf(p00, p10, p11));
-                            out.add(polyOf(p00, p11, p01));
-                        } else {
-                            out.add(polyOf(p00, p10, p01));
-                            out.add(polyOf(p10, p11, p01));
-                        }
-                    }
-                }
-            }
-        }
-        int maxFrags = 200;
-        if (out.size() > maxFrags) {
-            List<Poly> trimmed = new ArrayList<>(maxFrags);
-            for (int i = 0; i < maxFrags; i++) {
-                trimmed.add(out.remove(rnd.nextInt(out.size())));
-            }
-            return trimmed;
-        }
-        return out;
-    }
-
-    private static List<Poly> generateRadialSlices(double w, double h, Point2D center) {
-        List<Poly> out = new ArrayList<>();
-        Random rnd = new Random();
-        double cx = center.getX();
-        double cy = center.getY();
-        double maxR = Math.hypot(Math.max(cx, w - cx), Math.max(cy, h - cy)) + 20.0;
-
-        double minDeg = 6.0;
-        double maxDeg = 28.0;
-        int maxSlices = 200;
-
-        double angle = 0.0;
-        while (angle < 360.0 && out.size() < maxSlices) {
-            double remainingDeg = 360.0 - angle;
-            double span = Math.min(remainingDeg, minDeg + rnd.nextDouble() * (maxDeg - minDeg));
-            if (remainingDeg < minDeg) {
-                span = remainingDeg;
-            }
-            double a0 = Math.toRadians(angle);
-            double a1 = Math.toRadians(angle + span);
-            int bands = 1 + rnd.nextInt(4);
-            double rPrev = 0.0;
-            for (int b = 0; b < bands; b++) {
-                double remaining = maxR - rPrev;
-                if (remaining <= 4) break;
-                double thickness = remaining * (0.12 + rnd.nextDouble() * 0.23);
-                double r1 = Math.min(maxR, rPrev + thickness);
-
-                Point2D p0 = new Point2D(cx + rPrev * Math.cos(a0), cy + rPrev * Math.sin(a0));
-                Point2D p1 = new Point2D(cx + r1 * Math.cos(a0), cy + r1 * Math.sin(a0));
-                Point2D p2 = new Point2D(cx + r1 * Math.cos(a1), cy + r1 * Math.sin(a1));
-                Point2D p3 = new Point2D(cx + rPrev * Math.cos(a1), cy + rPrev * Math.sin(a1));
-
-                double j = 4.0;
-                p1 = p1.add((rnd.nextDouble() - 0.5) * j, (rnd.nextDouble() - 0.5) * j);
-                p2 = p2.add((rnd.nextDouble() - 0.5) * j, (rnd.nextDouble() - 0.5) * j);
-                if (!within(p1, w, h) && !within(p2, w, h) && !within(p0, w, h) && !within(p3, w, h)) {
-                    rPrev = r1;
-                    continue;
-                }
-                Poly poly = polyOf(p0, p1, p2, p3);
-                out.add(poly);
-                if (out.size() >= maxSlices) break;
-                rPrev = r1;
-            }
-            angle += span;
-        }
-        if (out.size() < maxSlices) {
-            double outerA0 = 0.0;
-            double ringInner = Math.max(0, maxR - 40.0);
-            double ang = outerA0;
-            while (ang < 360.0 && out.size() < maxSlices) {
-                double piece = 20.0 + rnd.nextDouble() * 35.0;
-                double a0r = Math.toRadians(ang);
-                double a1r = Math.toRadians(Math.min(360.0, ang + piece));
-                Point2D q0 = new Point2D(cx + ringInner * Math.cos(a0r), cy + ringInner * Math.sin(a0r));
-                Point2D q1 = new Point2D(cx + maxR * Math.cos(a0r), cy + maxR * Math.sin(a0r));
-                Point2D q2 = new Point2D(cx + maxR * Math.cos(a1r), cy + maxR * Math.sin(a1r));
-                Point2D q3 = new Point2D(cx + ringInner * Math.cos(a1r), cy + ringInner * Math.sin(a1r));
-                if (within(q0, w, h) || within(q1, w, h) || within(q2, w, h) || within(q3, w, h)) {
-                    out.add(polyOf(q0, q1, q2, q3));
-                }
-                ang += piece;
-            }
-        }
-        return out;
-    }
-
-    private static boolean within(Point2D p, double w, double h) {
-        double x = p.getX();
-        double y = p.getY();
-        return x >= -2 && x <= w + 2 && y >= -2 && y <= h + 2;
-    }
-
-    private static Poly polyOf(Point2D... pts) {
-        double[] xs = new double[pts.length];
-        double[] ys = new double[pts.length];
-        for (int i = 0; i < pts.length; i++) {
-            xs[i] = pts[i].getX();
-            ys[i] = pts[i].getY();
-        }
-        return new Poly(xs, ys);
-    }
-}
Index: src/main/java/org/overb/arkanoidfx/entities/BallEntity.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/entities/BallEntity.java b/src/main/java/org/overb/arkanoidfx/entities/BallEntity.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/entities/BallEntity.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,21 +0,0 @@
-package org.overb.arkanoidfx.entities;
-
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class BallEntity {
-    public int id;
-    public String name;
-    public int sizeW;
-    public int sizeH;
-    public Sprite visual;
-    public Sounds sounds;
-
-    @JsonIgnoreProperties(ignoreUnknown = true)
-    public static class Sounds {
-        public String hitWall;
-        public String hitPaddle;
-        public String hitLightning;
-        public String lost;
-    }
-}
\ No newline at end of file
Index: src/main/resources/assets/text/bricks.json
===================================================================
diff --git a/src/main/resources/assets/text/bricks.json b/src/main/resources/assets/text/bricks.json
deleted file mode 100644
--- a/src/main/resources/assets/text/bricks.json	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,105 +0,0 @@
-{
-  "bricks": [
-    {
-      "id": 1,
-      "name": "regular",
-      "visual": {
-        "sprite": "brick_regular.png",
-        "frames": 1,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0.08
-      },
-      "animated": false,
-      "damageAdvancesFrame": false,
-      "breakAnim": null,
-      "hp": 1,
-      "points": 1,
-      "speedEffect": 0.0,
-      "hitSound": "regular_brick_hit.wav",
-      "destroySound": null
-    },
-    {
-      "id": 2,
-      "name": "immortal_regular",
-      "visual": {
-        "sprite": "brick_immortal.png",
-        "frames": 1,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0.08
-      },
-      "animated": false,
-      "damageAdvancesFrame": false,
-      "breakAnim": null,
-      "hp": -1,
-      "points": 0,
-      "speedEffect": 0.0,
-      "hitSound": "metal_brick_hit.wav",
-      "destroySound": null
-    },
-    {
-      "id": 3,
-      "name": "rubber",
-      "visual": {
-        "sprite": "brick_rubber.png",
-        "frames": 1,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0.06
-      },
-      "animated": false,
-      "damageAdvancesFrame": true,
-      "breakAnim": null,
-      "hp": -1,
-      "points": 0,
-      "speedEffect": 0.05,
-      "hitSound": "rubber_brick_hit.wav",
-      "destroySound": null
-    },
-    {
-      "id": 4,
-      "name": "multi_hit_regular",
-      "visual": {
-        "sprite": "brick_glass_break.png",
-        "frames": 3,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0
-      },
-      "animated": false,
-      "damageAdvancesFrame": true,
-      "breakAnim": null,
-      "hp": 3,
-      "points": 5,
-      "speedEffect": 0.0,
-      "hitSound": "glass_brick_hit.wav",
-      "destroySound": "glass_brick_hit.wav"
-    },
-    {
-      "id": 5,
-      "name": "glass",
-      "visual": {
-        "sprite": "brick_glass.png",
-        "frames": 1,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0.08
-      },
-      "animated": false,
-      "damageAdvancesFrame": false,
-      "breakAnim": {
-        "sprite": "brick_glass_break.png",
-        "frames": 17,
-        "frameW": 50,
-        "frameH": 20,
-        "frameDuration": 0.05
-      },
-      "hp": 1,
-      "points": 1,
-      "speedEffect": 0.0,
-      "hitSound": "glass_brick_hit.wav",
-      "destroySound": null
-    }
-  ]
-}
\ No newline at end of file
Index: src/main/java/org/overb/arkanoidfx/game/world/BallFactory.java
===================================================================
diff --git a/src/main/java/org/overb/arkanoidfx/game/world/BallFactory.java b/src/main/java/org/overb/arkanoidfx/game/world/BallFactory.java
deleted file mode 100644
--- a/src/main/java/org/overb/arkanoidfx/game/world/BallFactory.java	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ /dev/null	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
@@ -1,93 +0,0 @@
-package org.overb.arkanoidfx.game.world;
-
-import com.almasb.fxgl.dsl.EntityBuilder;
-import com.almasb.fxgl.entity.Entity;
-import com.almasb.fxgl.entity.components.CollidableComponent;
-import com.almasb.fxgl.physics.BoundingShape;
-import com.almasb.fxgl.physics.HitBox;
-import com.almasb.fxgl.texture.Texture;
-import javafx.geometry.Point2D;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Rectangle;
-import org.overb.arkanoidfx.components.BallAnimComponent;
-import org.overb.arkanoidfx.components.BallComponent;
-import org.overb.arkanoidfx.entities.BallEntity;
-import org.overb.arkanoidfx.entities.EntityRepository;
-import org.overb.arkanoidfx.enums.EntityType;
-import org.overb.arkanoidfx.game.ResolutionManager;
-import org.overb.arkanoidfx.util.TextureUtils;
-
-import java.util.Objects;
-
-public final class BallFactory {
-
-    private final BallEntity defaultBallDefinition;
-
-    public BallFactory(EntityRepository repository) {
-        this.defaultBallDefinition = repository.getBalls().values().stream().findFirst().orElse(null);
-    }
-
-    public void spawnBallAttachedToPaddle(Entity paddle) {
-        double ballWidth = EntityType.BALL.getDesignWidth();
-        double ballHeight = EntityType.BALL.getDesignHeight();
-        double paddleY = ResolutionManager.DESIGN_RESOLUTION.getHeight() - 80;
-        Texture ballTexture = createBallTexture(ballWidth, ballHeight);
-        double startX = paddle.getX() + paddle.getWidth() / 2.0 - ballWidth / 2.0;
-        double startY = paddleY - ballHeight - 4.0;
-        Entity ball = buildBaseBall(startX, startY, ballWidth, ballHeight, ballTexture);
-        attachBallComponents(ball, ballTexture, paddle);
-    }
-
-    public void spawnLaunchedBallAt(double x, double y, Point2D velocity, Entity paddle) {
-        double ballWidth = EntityType.BALL.getDesignWidth();
-        double ballHeight = EntityType.BALL.getDesignHeight();
-        Texture ballTexture = createBallTexture(ballWidth, ballHeight);
-        Entity ball = buildBaseBall(x, y, ballWidth, ballHeight, ballTexture);
-        attachBallComponents(ball, ballTexture, paddle);
-        ball.getComponent(BallComponent.class).setLaunchedWithVelocity(velocity);
-    }
-
-    private Texture createBallTexture(double ballWidth, double ballHeight) {
-        if (defaultBallDefinition == null || defaultBallDefinition.visual == null || defaultBallDefinition.visual.sprite == null) {
-            return null;
-        }
-        return TextureUtils.loadTextureOrNull(
-                defaultBallDefinition.visual.sprite,
-                ballWidth,
-                ballHeight,
-                Math.max(1, defaultBallDefinition.visual.frameW),
-                Math.max(1, defaultBallDefinition.visual.frameH)
-        );
-    }
-
-    private Entity buildBaseBall(double x, double y, double ballWidth, double ballHeight, Texture ballTexture) {
-        return new EntityBuilder()
-                .type(EntityType.BALL)
-                .at(x, y)
-                .view(Objects.requireNonNullElseGet(ballTexture, () -> new Rectangle(ballWidth, ballHeight, Color.ORANGE)))
-                .bbox(new HitBox(BoundingShape.circle(Math.min(ballWidth, ballHeight) / 2.0)))
-                .with(new CollidableComponent(true))
-                .buildAndAttach();
-    }
-
-    private void attachBallComponents(Entity ball, Texture ballTexture, Entity paddle) {
-        BallComponent ballComponent = new BallComponent(paddle);
-        if (defaultBallDefinition != null && defaultBallDefinition.sounds != null) {
-            ballComponent.setSounds(defaultBallDefinition.sounds.hitWall, defaultBallDefinition.sounds.hitPaddle, defaultBallDefinition.sounds.lost);
-        }
-        ball.addComponent(ballComponent);
-        if (ballTexture != null && defaultBallDefinition != null && defaultBallDefinition.visual != null) {
-            int frames = Math.max(1, defaultBallDefinition.visual.frames);
-            double frameDuration = defaultBallDefinition.visual.frameDuration > 0 ? defaultBallDefinition.visual.frameDuration : 0.0;
-            if (frames > 1 && frameDuration > 0) {
-                ball.addComponent(new BallAnimComponent(
-                        ballTexture,
-                        frames,
-                        Math.max(1, defaultBallDefinition.visual.frameW),
-                        Math.max(1, defaultBallDefinition.visual.frameH),
-                        frameDuration
-                ));
-            }
-        }
-    }
-}
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1760080774292)
+++ b/.idea/.name	(date 1760080774292)
@@ -0,0 +1,1 @@
+jarkanoid
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1760080774357)
+++ b/.idea/compiler.xml	(date 1760080774357)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="21" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1760080766681)
+++ b/.idea/gradle.xml	(date 1760080766681)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="21" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarkanoid-21.0.1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarkanoid-21.0.1.iml b/.idea/jarkanoid-21.0.1.iml
new file mode 100644
--- /dev/null	(date 1760080741097)
+++ b/.idea/jarkanoid-21.0.1.iml	(date 1760080741097)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1760109965242)
+++ b/.idea/misc.xml	(date 1760109965242)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_25" default="true" project-jdk-name="25" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1760080701542)
+++ b/.idea/uiDesigner.xml	(date 1760080701542)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1760080701542)
+++ b/.idea/vcs.xml	(date 1760080701542)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Game.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Game.iml b/Game.iml
new file mode 100644
--- /dev/null	(date 1760110500494)
+++ b/Game.iml	(date 1760110500494)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="AdditionalModuleElements">
+    <content url="file://$MODULE_DIR$" dumb="true">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1760110500496)
+++ b/.idea/modules.xml	(date 1760110500496)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Game.iml" filepath="$PROJECT_DIR$/Game.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nGame cổ\r\nGame của 3 tài tử chỉ có đỉnh
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 7f4dccc194ebe0db690057ac8cddb1991abe4d17)
+++ b/README.md	(date 1760080701481)
@@ -1,3 +1,233 @@
+## JArkanoid
+
+[![Github all releases](https://img.shields.io/github/downloads/HanSolo/jarkanoid/total.svg)](https://GitHub.com/HanSolo/jarkanoid/releases/)
+
+JArkanoid is a simple clone of the game Arkanoid from 1986 by Taito written in JavaFX.
+
+The game contains 32 levels and is only missing the last level at the moment.
+It is not an 100% clone of the original game because it does not contain the molecules
+and other things that are flying around and that one can shoot. I might add them later
+though. Also the bonus block that adds the additional balls is working a bit differently
+than the original one. The speed of the ball is also constant and will not vary over
+time.
+
+All sprites and spritemaps are drawn by myself and can be found in the resources folder
+in the main directory of the project. These files are in the format of Affinity Designer.
+
+### Settings
+- The game will create a properties file in your user folder named jarkanoid.properties
+- You can set the default ball speed in that file to values between 0.1 and 10. (2 recommended for M1 Macs, 3 for x64 machines and 5-7 for aarch64 Raspberry Pi)
+
+e.g. `/home/YOUR_USERNAME/jarkanoid.properties`
+```properties
+highscore=0
+ball_speed=3.0
+bonus_block_speed=3.0
+enemy_speed=3.0
+```
+
+### Gameplay
+- Space key to start the game or shoot (when laser paddle)
+- Move paddle to the left: Arrow left or A key
+- Move paddle to the right: Arrow right or D key
+- Shoot: Space bar
+- Paddle can also be moved by dragging it with the mouse
+- The ball can get some spin when the paddle is moved when they have contact
+
+### Paddles
+#### Standard
+![STANDARD](https://github.com/HanSolo/jarkanoid/blob/main/resources/standardPaddle.png?raw=true)
+
+#### Wide
+![WIDE](https://github.com/HanSolo/jarkanoid/blob/main/resources/widePaddle.png?raw=true)
+
+#### Laser
+![LASER](https://github.com/HanSolo/jarkanoid/blob/main/resources/laserPaddle.png?raw=true)
+
+
+### Bonus Blocks
+- C (color lime)        -> catch ball (for next ball)
+- D (color cyan)        -> additional balls (max 3)
+- F (color dark blue)   -> wide paddle (for 30 seconds)
+- L (color red)         -> laser paddle (for 30 seconds)
+- S (color dark yellow) -> slow down (for 30 seconds)
+- B (color magenta)     -> opens door to next level (for 5 seconds)
+- P (color gray)        -> additional life (max 5)
+
+### Blocks
+- white    -> 50 points 
+- orange   -> 60 points 
+- cyan     -> 70 points 
+- lime     -> 80 points 
+- red      -> 90 points
+- blue     -> 100 points 
+- magenta  -> 110 points
+- yellow   -> 120 points
+- gray     -> needs 2 hits to destroy it (increasing by 1 ever 8 levels) -> 50 x level
+- gold     -> can't be destroyed
+
+### Levels
+
+##### Start screen
+
+![Start screen](https://github.com/HanSolo/jarkanoid/blob/main/resources/startscreen.png?raw=true)
+
+
+##### Level 1
+
+![Level 1](https://github.com/HanSolo/jarkanoid/blob/main/resources/level1.png?raw=true)
+
+
+##### Level 2
+
+![Level 2](https://github.com/HanSolo/jarkanoid/blob/main/resources/level2.png?raw=true)
+
+
+##### Level 3
+
+![Level 3](https://github.com/HanSolo/jarkanoid/blob/main/resources/level3.png?raw=true)
+
+
+##### Level 4
+
+![Level 4](https://github.com/HanSolo/jarkanoid/blob/main/resources/level4.png?raw=true)
+
+
+##### Level 5
+
+![Level 5](https://github.com/HanSolo/jarkanoid/blob/main/resources/level5.png?raw=true)
+
+
+##### Level 6
+
+![Level 6](https://github.com/HanSolo/jarkanoid/blob/main/resources/level6.png?raw=true)
+
+
+##### Level 7
+
+![Level 7](https://github.com/HanSolo/jarkanoid/blob/main/resources/level7.png?raw=true)
+
+
+##### Level 8
+
+![Level 8](https://github.com/HanSolo/jarkanoid/blob/main/resources/level8.png?raw=true)
+
+
+##### Level 9
+
+![Level 9](https://github.com/HanSolo/jarkanoid/blob/main/resources/level9.png?raw=true)
+
+
+##### Level 10
+
+![Level 10](https://github.com/HanSolo/jarkanoid/blob/main/resources/level10.png?raw=true)
+
+
+##### Level 11
+
+![Level 11](https://github.com/HanSolo/jarkanoid/blob/main/resources/level11.png?raw=true)
+
+
+##### Level 12
+
+![Level 12](https://github.com/HanSolo/jarkanoid/blob/main/resources/level12.png?raw=true)
 
-Game cổ
-Game của 3 tài tử chỉ có đỉnh
\ No newline at end of file
+
+##### Level 13
+
+![Level 13](https://github.com/HanSolo/jarkanoid/blob/main/resources/level13.png?raw=true)
+
+
+##### Level 14
+
+![Level 14](https://github.com/HanSolo/jarkanoid/blob/main/resources/level14.png?raw=true)
+
+
+##### Level 15
+
+![Level 15](https://github.com/HanSolo/jarkanoid/blob/main/resources/level15.png?raw=true)
+
+
+##### Level 16
+
+![Level 16](https://github.com/HanSolo/jarkanoid/blob/main/resources/level16.png?raw=true)
+
+
+##### Level 17
+
+![Level 17](https://github.com/HanSolo/jarkanoid/blob/main/resources/level17.png?raw=true)
+
+
+##### Level 18
+
+![Level 18](https://github.com/HanSolo/jarkanoid/blob/main/resources/level18.png?raw=true)
+
+
+##### Level 19
+
+![Level 19](https://github.com/HanSolo/jarkanoid/blob/main/resources/level19.png?raw=true)
+
+
+##### Level 20
+
+![Level 20](https://github.com/HanSolo/jarkanoid/blob/main/resources/level20.png?raw=true)
+
+
+##### Level 21
+
+![Level 21](https://github.com/HanSolo/jarkanoid/blob/main/resources/level21.png?raw=true)
+
+
+##### Level 22
+
+![Level 22](https://github.com/HanSolo/jarkanoid/blob/main/resources/level22.png?raw=true)
+
+
+##### Level 23
+
+![Level 23](https://github.com/HanSolo/jarkanoid/blob/main/resources/level23.png?raw=true)
+
+
+##### Level 24
+
+![Level 24](https://github.com/HanSolo/jarkanoid/blob/main/resources/level24.png?raw=true)
+
+
+##### Level 25
+
+![Level 25](https://github.com/HanSolo/jarkanoid/blob/main/resources/level25.png?raw=true)
+
+
+##### Level 26
+
+![Level 26](https://github.com/HanSolo/jarkanoid/blob/main/resources/level26.png?raw=true)
+
+
+##### Level 27
+
+![Level 27](https://github.com/HanSolo/jarkanoid/blob/main/resources/level27.png?raw=true)
+
+
+##### Level 28
+
+![Level 28](https://github.com/HanSolo/jarkanoid/blob/main/resources/level28.png?raw=true)
+
+
+##### Level 29
+
+![Level 29](https://github.com/HanSolo/jarkanoid/blob/main/resources/level29.png?raw=true)
+
+
+##### Level 30
+
+![Level 30](https://github.com/HanSolo/jarkanoid/blob/main/resources/level30.png?raw=true)
+
+
+##### Level 31
+
+![Level 31](https://github.com/HanSolo/jarkanoid/blob/main/resources/level31.png?raw=true)
+
+
+##### Level 32
+
+![Level 32](https://github.com/HanSolo/jarkanoid/blob/main/resources/level32.png?raw=true)
